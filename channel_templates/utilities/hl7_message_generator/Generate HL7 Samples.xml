<channel version="3.4.1">
  <id>7349e404-71ed-4ac2-acae-4d0d50b03487</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>Generate HL7 Samples</name>
  <description>This channel is a tool for generating sample HL7 messages. These messages contain the segments and data elements that are commonly sent in the supported message types. Messages from production systems will typically omit many data elements that are not required; the optional elements included in these sample messages will help you test and validate your interface configuration.

To generate a sample HL7 message, send a message to this channel with the following format:

[messageType]^[eventType]

The channel will return a sample HL7 message in response. You can view this response within Mirth by selecting the source connector for a message and clicking the Response radio button.

The currently supported message and event types are:

ADT^A01 - Admit / visit notification
ADT^A02 - Transfer a patient
ADT^A03 - Discharge/end visit
ADT^A04 - Register a patient
ADT^A05 - Pre-admit a patient
ADT^A06 - Change an outpatient to an inpatient
ADT^A07 - Change an inpatient to an outpatient
ADT^A08 - Update patient information
ADT^A13 - Cancel discharge / end visit
ADT^A14 - Pending admit
ADT^A28 - Add person information

SIU^S12 - Notification of new appointment booking
SIU^S13 - Notification of appointment rescheduling
SIU^S14 - Notification of appointment modification
SIU^S15 - Notification of appointment cancellation
SIU^S26 - Notification that patient did not show up for scheduled appointment

SRM^S01 - Request new appointment booking
SRM^S02 - Request appointment rescheduling
SRM^S03 - Request appointment modification
SRM^S04 - Request appointment deletion

MDM^T01 - Original document notification
MDM^T02 - Original document notification and content

ORU^R01 - Observation Message

ORM^O01 - Order Message</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1513288839110</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>4</revision>
  <sourceConnector version="3.4.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.4.1">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.4.1">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="3.4.1">
        <host>0.0.0.0</host>
        <port>9986</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.4.1">
        <responseVariable>sampleResp</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>0</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>0</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>false</xmlBody>
      <parseMultipart>false</parseMultipart>
      <includeMetadata>false</includeMetadata>
      <binaryMimeTypes></binaryMimeTypes>
      <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
      <responseContentType></responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode></responseStatusCode>
      <responseHeaders class="linked-hash-map"/>
      <charset>DEFAULT_ENCODING</charset>
      <contextPath></contextPath>
      <timeout></timeout>
      <staticResources/>
    </properties>
    <transformer version="3.4.1">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>New Step</name>
          <script>var params = new java.lang.String(connectorMessage.getRawData().toString());
	try{
	var messageType = msg[&apos;row&apos;][&apos;column1&apos;].toString();
	var eventType = msg[&apos;row&apos;][&apos;column2&apos;].toString();

	
	
	channelMap.put(&quot;messageType&quot;,messageType);
	channelMap.put(&quot;eventType&quot;,eventType);
	var sample = generateMessage(messageType,eventType);
	channelMap.put(&quot;sample&quot;,sample);
	responseMap.put(&quot;sampleResp&quot;,sample);
	channelMap.put(&quot;respCode&quot;,&quot;200&quot;);
	channelMap.put(&apos;mirth_type&apos;,messageType+&quot;_&quot;+eventType);}
	catch(e){
		responseMap.put(&quot;sampleResp&quot;,e)
		channelMap.put(&quot;respCode&quot;,&quot;500&quot;);
		throw(e);	
		}
//================================================================================
//Message Functions
//================================================================================
function generateMessage(messageType,eventType){
	var msg = &quot;&quot;;
	switch(messageType){
	case &quot;ADT&quot;: msg = ADT(eventType);
	break;
	case &quot;SIU&quot;: msg = SIU(eventType);
	break;
	case &quot;SRM&quot;: msg = SRM(eventType);
	break;
	case &quot;MDM&quot;: msg = MDM(eventType);
	break;
	case &quot;ORU&quot;: msg = ORU(eventType);
	break;
	case &quot;ORM&quot;: msg = ORM(eventType);
	break;
	case &quot;RAS&quot;: msg = &quot;&quot;;//RAS(eventType);
	default: throw(&quot;Not a supported message type. Currently supports ADT, SIU, SRM, MDM, ORU, ORM. Try sending ADT^A01 to receive a sample message&quot;);
	}
	return msg;
};
function ORU(eventType){
	if (eventType !== &quot;R01&quot;){throw (&quot;Not a supported event type for ORU. Supported event types are: R01. Try sending ORU^R01 to receive a sample message&quot;)}
	var pat = person();
	var ord = order();
	var obs = pathObs(ord);
	msg = MSH(&quot;ORU&quot;,eventType)+PID(pat)+PD1(pat)+NTE(1)+
	PV1(pat)+PV2(pat)+
	ORC(ord)+OBR(ord)+NTE(2)+OBX(obs)+NTE(3);
	return msg.toUpperCase();
}
function SIU(eventType){
	var pat = person();
	var appt = appointment();
	var msg = &quot;&quot;; //add aig
	var ord = order();
	var obs = pathObs(ord);
	msg = MSH(&quot;SIU&quot;,eventType)+SCH(eventType,appt)+NTE(1)+ 
	PID(pat)+PV1(pat)+PV2(pat)+OBX(obs)+DG1()+
	RGS(appt)+AIS(appt)+NTE(2)+AIG(appt)+NTE(3)+AIL(appt)+NTE(4)+AIP(appt)+NTE(5);
	return msg.toUpperCase();
}
function SRM(eventType){
	var pat = person();
	var appt = appointment();
	var msg = &quot;&quot;; //add aig
	var ord = order();
	var obs = pathObs(ord);
	msg = MSH(&quot;SRM&quot;,eventType)+ARQ(eventType,appt)+APR()+NTE(1)+ 
	PID(pat)+PV1(pat)+PV2(pat)+OBX(obs)+DG1()+
	RGS(appt)+AIS(appt)+APR()+NTE(2)+
	AIG(appt)+APR()+NTE(3)+
	AIL(appt)+APR()+NTE(4)+
	AIP(appt)+APR()+NTE(5);
	return msg.toUpperCase();
}
function MDM(eventType){
	var pat = person();
	var appt = appointment();
	var msg = &quot;&quot;;
	msg = MSH(&quot;MDM&quot;,eventType) + EVN(&quot;MDM&quot;,eventType) + PID(pat) + PV1(pat) + TXA() + mdmOBX(eventType);
	return msg.toUpperCase();
}
//in progress *******************
function ORM(eventType){
	if (eventType !== &quot;O01&quot;){throw(&quot;Not a supported event type for ORM. Supported event types are: O01. Try sending ORM^O01 to receive a sample message&quot;);}
	var pat = person();
	var rel = relative(pat);
	var ord = order();
	var obs = pathObs(ord);
	var ins = insurance(pat);
	msg = MSH(&quot;ORM&quot;,eventType)+NTE(1)+
	PID(pat)+PD1(pat)+NTE(2)+
	PV1(pat)+PV2(pat)+
	IN1(ins)+IN2(ins)+IN3(ins)+GT1(rel)+AL1()+
	ORC(ord)+NTE(3)+OBR(ord)+DG1()+OBX(obs)+NTE(3);
	return msg.toUpperCase();
}
function ADT(eventType){
	switch(eventType){
	case &quot;A01&quot;:
	case &quot;A02&quot;:
	case &quot;A03&quot;:
	case &quot;A04&quot;:
	case &quot;A05&quot;:
	case &quot;A06&quot;:
	case &quot;A07&quot;:
	case &quot;A08&quot;:
	case &quot;A13&quot;:
	case &quot;A14&quot;:
	case &quot;A28&quot;:
		break;
	default: throw(&quot;Not a supported message type for ADT. Supported event types are: A01, A02, A03, A04, A05, A06, A07, A08, A13, A14, A28. Try sending ADT^A01 to receive a sample message&quot;);
	break;
	}
	/*
	 * A01 - admit
	 * A02 - transfer
	 * A03 - discharge
	 * A04 - register
	 * A05 - preadmit
	 */
	
	var pat = person();
	var rel = relative(pat);
	var appt = appointment();
	var obs = pathObs(null);
	var prov = provider();
	var ins = insurance(pat);
	var msg = &quot;&quot;;
	msg = MSH(&quot;ADT&quot;,eventType) + EVN(&quot;ADT&quot;,eventType) + PID(pat) + PD1(pat) + NK1(rel) + PV1(pat) + 
	PV2(pat) + DB1(pat) + OBX(obs) +AL1() + DG1() + DRG() + 
	PR1() + ROL(prov) + GT1(rel) + IN1(ins) + IN2(ins) + IN3(ins)+ ACC();
	return msg.toUpperCase();
}
//================================================================================
//Segment Functions
//================================================================================
function MSH(messageType,eventType){
	var msh = &quot;MSH|^~\&amp;|&quot; +
			&quot;DATICA|&quot; + //sending application
			valFromList([hospital(),clinic()])+&quot;|&quot; +
			&quot;EXTERNAL EMR|&quot; + //receiving application
			&quot;EXTERNAL CLINIC|&quot; +
			today()+&quot;|&quot;+ //message date / time
			&quot;|&quot; + //security
			messageType+&quot;^&quot;+eventType+&quot;|&quot;+
			randomInt(7)+&quot;|&quot;+ //message control ID
			valFromList([&quot;D&quot;,&quot;P&quot;,&quot;T&quot;]) +&quot;|&quot;+ //processing ID
			&quot;2.3|&quot; + //hl7 version
			&quot;\n&quot;;
	return msh;
}
function PID(patient){
	var pid = &quot;PID|1|&quot; +
	patient.id.external + &quot;|&quot; + // external ID
	patient.id.internal + &quot;|&quot; + // internal ID
	patient.id.alternate + &quot;|&quot; + // alternate ID
	patient.name.last+&quot;^&quot;+patient.name.first + &quot;|&quot; + //patient name
	patient.name.mothersMaiden + &quot;|&quot; + // mother&apos;s maiden name
	patient.dob + &quot;|&quot; + //DOB
	patient.sex + &quot;|&quot; + //sex
	patient.name.alias + &quot;|&quot; + //alias
	patient.race + &quot;|&quot; + //race
	patient.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+patient.address.state+&quot;^&quot;+patient.address.zip + &quot;|&quot; + //address
	patient.address.zip + &quot;|&quot; + //county code
	patient.phone.home + &quot;|&quot; + //home phone
	patient.phone.work + &quot;|&quot; + //business phone
	patient.language + &quot;|&quot; + //primary language
	patient.married + &quot;|&quot; + //marital status
	patient.religion + &quot;|&quot; + //religion
	patient.account + &quot;|&quot; + //account number
	patient.ssn + &quot;|&quot; + //ssn number
	patient.driversLicense + &quot;|&quot; + //drivers license number
	&quot;&quot; + &quot;|&quot; + //mother&apos;s identifier
	patient.ethnicity + &quot;|&quot; + //ethnic group
	patient.birthPlace + &quot;|&quot; + //birth place
	patient.multipleBirth + &quot;|&quot; + //multiple birth indicator
	patient.birthOrder + &quot;|&quot; + //birth order
	patient.citizenship + &quot;|&quot; + //citizenship
	&quot;&quot; + &quot;|&quot; + //veteran status
	&quot;US^UNITED STATES OF AMERICA&quot; + &quot;|&quot; + //
	&quot;&quot; + &quot;|&quot; + //patient death date
	&quot;N&quot; + &quot;|&quot; + //patient death indicator
	&quot;&quot; + &quot;|\n&quot;; //
	return pid.toUpperCase();
};
function EVN(messageType,eventType){
	evn = &quot;EVN|&quot; +
			messageType+&quot;^&quot;+eventType +&quot;|&quot; +
			today() + &quot;|&quot; +
			today() + &quot;|&quot; +
			&quot;02|&quot; + //event reason = physician request
			randomName()+&quot;|&quot; +
					today()+&quot;\n&quot;; 
	return evn.toUpperCase();
}
function PD1(patient){
	var pd1 = &quot;PD1|&quot; +
			patient.dependent +&quot;|&quot; + //dependent status
			patient.livingArrangement +&quot;|&quot; + //living arrangement
			valFromList([hospital(),clinic()])+&quot;|&quot; + //primary care facility
			formatProvider(provider())+&quot;|&quot; + //pcp
			patient.student + &quot;|&quot; + //student status
				&quot;|&quot; + //handicap
			patient.livingWill+&quot;|&quot; +
			patient.organDonor+&quot;|&quot; +
			patient.separateBill + &quot;|&quot; +
					&quot;|&quot; + //duplicate patient
					patient.publicity + &quot;|&quot; + //publicity indicator
					patient.protection + &quot;\n&quot;;  
	return pd1.toUpperCase();
}
function DB1(patient){
	var personCode = valFromList([&quot;PT&quot;,&quot;GT&quot;,&quot;IN&quot;,&quot;AP&quot;]);
	var personId = null;
	if (personCode == &quot;PT&quot;){
		personId = patient.id.external;
	}else {
		personId = randomInt(6);
	}
	var db1 = &quot;DB1|&quot; +
			&quot;1|&quot; + //set ID
			personCode+&quot;|&quot;+
			personId+&quot;|&quot; +
			YN()+&quot;|&quot; + //disability visit?
			formatDate(randomDate(2016,2016))+ &quot;|&quot; + //disability start date
			formatDate(randomDate(2017,2017))+&quot;|&quot; + //disability end date
			formatDate(randomDate(2018,2018)) + //return to work date
			&quot;\n&quot;;//unable to work date
	return db1;
}
function NK1(rel){ //requires a relative
	var nk1 = &quot;NK1|1|&quot; +
			rel.name.last+&quot;^&quot;+rel.name.first + &quot;|&quot;+ //name
			rel.relationship+&quot;|&quot; + //relationship
			rel.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+rel.address.state+&quot;^&quot;+rel.address.zip + &quot;|&quot; + //address
			rel.phone.home + &quot;|&quot; + //home phone
			rel.phone.work + &quot;|&quot; + //business phone
			&quot;N|&quot; + //contact role = next of kin
			formatDate(randomDate(2012,2016))+&quot;|&quot; + //start date
			&quot;|&quot; + //end date
			rel.jobTitle+&quot;|&quot; + //job title
			&quot;|&quot; + //job code / class
			&quot;|&quot; + //employee number
			&quot;|&quot; + //organization name
			rel.married+&quot;|&quot; + //marital status
			rel.sex+&quot;|&quot; + //sex code
			rel.dob+&quot;|&quot; + //dob
			&quot;U|&quot; + //living dependency
			rel.ambulatoryStatus+&quot;|&quot; + //ambulatory status
			rel.citizenship+&quot;|&quot; + //citizenship
			rel.language+&quot;|&quot; + //language
			rel.livingArrangement+&quot;|&quot; + //living arrangement
			rel.publicity+&quot;|&quot; + //publicity indicator
			rel.protection+&quot;|&quot; + //protection indicator
			rel.student+&quot;|&quot; + //student indicator
			rel.religion+&quot;|&quot; + //religion
			rel.name.mothersMaiden+&quot;|&quot; + //mother&apos;s maiden name
			&quot;US|&quot; + //nationality
			rel.ethnicity+&quot;|&quot; + //ethnic group
			&quot;|&quot; + //contact reason - blank if not org
			&quot;|&quot; + //contact person name blank if not org
			&quot;|&quot; + //contact person phone blank if not org
			&quot;|&quot; + //contact person address blank if not org
			rel.id.external+&quot;|&quot; + //associated party identifiers 
			rel.jobStatus+&quot;|&quot; + //job status
			rel.race+&quot;|&quot; + //race
			&quot;|&quot; + //handicap
			rel.ssn+&quot;|&quot; + //ssn
			&quot;\n&quot;;
	return nk1;
}
function PV1(patient){
	var pv1 = &quot;PV1|1|&quot; +
			valFromList([&quot;E&quot;,&quot;I&quot;,&quot;O&quot;,&quot;P&quot;,&quot;R&quot;,&quot;B&quot;])+&quot;|&quot; + //patient class
			patientLocation(&quot;A&quot;)+&quot;|&quot; + //assigned location
			valFromList([&quot;A&quot;,&quot;E&quot;,&quot;L&quot;,&quot;R&quot;])+&quot;|&quot; + //admission type
			randomInt(6)+&quot;|&quot; + //preadmit number
			patientLocation(&quot;B&quot;)+&quot;|&quot; + //prior patient location
			formatProvider(provider())+&quot;|&quot; + //attending doctor
			formatProvider(provider())+&quot;|&quot; + //referring doctor
			formatProvider(provider())+&quot;|&quot; + //consulting doctor
			valFromList([&quot;MED&quot;,&quot;SUR&quot;,&quot;URO&quot;,&quot;PUL&quot;,&quot;CAR&quot;])+&quot;|&quot; + //hospital service
			patientLocation(&quot;A&quot;)+&quot;|&quot; + //temporary location
			&quot;N|&quot; + //preadmit test indicator
			&quot;|&quot; + //readmission indicator - either R or null
			randomInt(1)+&quot;|&quot; + //admit source - 1-9
			patient.ambulatoryStatus+&quot;|&quot; + //ambulatory status
			&quot;|&quot; + //vip indicator - leaving blank
			formatProvider(provider())+&quot;|&quot; + //admitting doctor
			&quot;U|&quot; + //patient type - can&apos;t find suggested values
			randomInt(6)+&quot;|&quot; + //visit number
			&quot;A23|&quot; + //financial class
			&quot;R|&quot; + //charge price indicator
			&quot;N|&quot; + //courtesy code
			&quot;G|&quot; + //credit rating
			&quot;44|&quot; + //contract code
			formatDate(randomDate(2015,2016))+&quot;|&quot; + //contract effective date
			price(3)+&quot;|&quot; + //contract amount
			randomInt(1)+&quot;|&quot; + //contract period
			&quot;C|&quot; + //interest code
			&quot;B|&quot; + //transfer to bad debt code
			&quot;|&quot; + //transfer to bad debt date
			&quot;|&quot; + //bad debt agency code
			&quot;|&quot; + //bad debt transfer amount
			&quot;|&quot; + //bad debt recovery amount
			&quot;|&quot; + //delete account indicator
			&quot;|&quot; + //delete account date
			&quot;|&quot; + //discharge disposition
			&quot;|&quot; + //discharged to location
			&quot;|&quot; + //diet type
			&quot;|&quot; + //servicing facility
			&quot;|&quot; + //bed status
			&quot;|&quot; + //account status
			&quot;|&quot; + //pending location
			&quot;|&quot; + //prior temporary location
			&quot;\n&quot;;
	return pv1;
}
function PV2(patient){
	var pv2 = &quot;PV2|&quot; +
			patientLocation(&quot;D&quot;)+&quot;|&quot; + //prior pending location
			&quot;ZD|&quot; + //accommodation code
			diagnosis()+&quot;|&quot; + //admit reason
			&quot;|&quot; + //transfer reason
			valFromList([&quot;watch&quot;,&quot;wallet&quot;,&quot;cellphone&quot;,&quot;ring&quot;])+&quot;|&quot; + //patient valuables
			&quot;Frontdesk A|&quot; + //patient valuables location
			valFromList([&quot;TE&quot;,&quot;&quot;])+&quot;|&quot; + //visit user code
			&quot;|&quot; + //expected admit date
			&quot;|&quot; + //expected discharge date
			&quot;|&quot; + //estimated length of stay
			&quot;|&quot; + //actual length of stay
			&quot;|&quot; + //visit description
			&quot;|&quot; + //referral source
			&quot;|&quot; + //previous service date
			&quot;|&quot; + //illness related indicator
			&quot;|&quot; + //purge status code
			&quot;|&quot; + //purge status date
			&quot;|&quot; + //special program code
			&quot;|&quot; + //retention indicator
			&quot;|&quot; + //expected number of insurance plans
			&quot;|&quot; + //visit publicity code
			&quot;|&quot; + //visit protection indicator
			&quot;|&quot; + //clinic organization name
			&quot;|&quot; + //patient status code
			&quot;|&quot; + //visit priority code
			&quot;|&quot; + //previous treatment date
			&quot;|&quot; + //expected discharge disposition
			&quot;|&quot; + //signature on file date
			&quot;|&quot; + //first similar illness date
			&quot;|&quot; + //patient charge adjustment code
			&quot;|&quot; + //recurring service code
			&quot;|&quot; + //billing media code
			&quot;|&quot; + //expected surgery date and time
			&quot;|&quot; + //military partnership code
			&quot;|&quot; + //military nonavailability code
			&quot;|&quot; + //newborn baby indicator
			&quot;|&quot; + //baby detained indicator
			&quot;\n&quot;;
	return pv2;
}
function SCH(eventType,appt){//* need to square up statuses with event type
	if (eventType == null){eventType = &quot;S12&quot;;}
	var eventReason = &quot;&quot;;
	switch(eventType){
	case &quot;S12&quot;: eventReason = &quot;BOOKED&quot;;
				appt.fillerStatusCode = &quot;BOOKED&quot;
		break;
	case &quot;S14&quot;: appt.fillerStatusCode = &quot;MODIFY&quot;;
	eventReason = &quot;MODIFY&quot;;
		break;
	case &quot;S13&quot;: appt.fillerStatusCode = &quot;RESCHED&quot;;
				eventReason = &quot;RESCHED&quot;;
		break;
	case &quot;S15&quot;: appt.fillerStatusCode = &quot;CANCELLED&quot;;
				eventReason = &quot;CANCELED&quot;;
		break;
	case &quot;S26&quot;: appt.fillerStatusCode = &quot;NOSHOW&quot;;
	eventReason = &quot;NOSHOW&quot;;
		break;
		default: throw(&quot;Not a valid event type for SIU. Supported event types are S12, S13, S14, S15, and S26. Try sending SIU^S12 to receive a sample message.&quot;);
	}
	var sch = &quot;SCH|&quot;+
	appt.placerId+&quot;|&quot;+ //placer appointment ID
	appt.fillerId+&quot;|&quot;+ //filler appointment ID
	&quot;|&quot;+ //occurrence number
	appt.placerGroup+&quot;|&quot;+ //placer group number
	&quot;|&quot;+ //schedule ID
	eventReason+&quot;|&quot;+ //event reason
	appt.reason+&quot;|&quot;+ //appointment reason
	appt.type+&quot;|&quot;+ //appointment type
	appt.duration+&quot;|&quot;+ //appointment duration
	&quot;min|&quot;+ //appointment duration units
	&quot;|&quot;+ //appointment timing quantity
	appt.placer.id.external+&quot;^&quot;+appt.placer.name.last+&quot;^&quot;+appt.placer.name.first+&quot;|&quot;+ //placer contact person
	appt.placer.phone.home+&quot;|&quot;+ //placer contact phone number
	appt.placer.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+appt.placer.address.state+&quot;^&quot;+appt.placer.address.zip + &quot;|&quot; + //placer contact address
	patientLocation(&quot;E&quot;)+&quot;|&quot;+ //placer contact location
	appt.filler.id.external+&quot;^&quot;+appt.filler.name.last+&quot;^&quot;+appt.filler.name.first+&quot;|&quot;+ //filler contact person
	appt.filler.phone.home+&quot;|&quot;+ //placer contact phone number
	appt.filler.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+appt.filler.address.state+&quot;^&quot;+appt.filler.address.zip + &quot;|&quot; + //placer contact address
	patientLocation(&quot;F&quot;)+&quot;|&quot;+ //placer contact location
	appt.placer.id.external+&quot;^&quot;+appt.placer.name.last+&quot;^&quot;+appt.placer.name.first+&quot;|&quot;+ //entered by person
	appt.placer.phone.home+&quot;|&quot;+ //entered by phone number
	patientLocation(&quot;E&quot;)+&quot;|&quot;+ //entered by location
	randomInt(7)+&quot;|&quot;+ //parent placer appointment ID
	randomInt(7)+&quot;|&quot;+//parent filler appointment ID
	appt.fillerStatusCode+&quot;|&quot;+//filler status code
	&quot;\n&quot;;
	
	return sch.toUpperCase();
}
function RGS(){ //add realistic rgs resources
	var rgs = &quot;RGS|&quot; +
			&quot;1|&quot; +
			&quot;|&quot; +
			randomInt(9)+&quot;|\n&quot;;
			return rgs;
}
function AIS(appt){
	
	var ais = &quot;AIS|1|&quot; +
			&quot;|&quot;+//segment action code
			randomInt(6)+&quot;|&quot;+//universal service identifier
			formatDate(adjustDate(appt.date,0,3))+&quot;|&quot;+//start date time
			&quot;|&quot;+//start date time offset
			&quot;|&quot;+//start date time offset units
			appt.duration+&quot;|&quot;+//duration
			&quot;min|&quot;+//duration units
			allowSubstitution()+&quot;|&quot;+//allow substitution code
			appt.fillerStatusCode+&quot;\n&quot;;//filler status code
			
	return ais;
}
function AIG(appt){
	var resource = valFromList([ //https://hcpcs.codes/l-codes/
		&quot;A4215^SYRINGE, STERILE, ANY SIZE, EACH^HCPCS&quot;,
		&quot;A4217^Sterile water/saline, 500 ml^HCPCS&quot;,
		&quot;A4259^LANCETS, PER BOX OF 100^HCPCS&quot;,
		&quot;C1726^Catheter, balloon dilatation, non-vascular^HCPCS&quot;,
		&quot;C1729^CATHETER, DRAINAGE^HCPCS&quot;,
	]);
	var aig = &quot;AIG|1|&quot; +
			&quot;|&quot;+//segment action code - only needed when modifying
			resource+&quot;|&quot;+//resource id
			&quot;|&quot;+//resource type
			&quot;|&quot;+//resource group
			&quot;|&quot;+//resource quantity
			&quot;|&quot;+//resource quantity units
			formatDate(adjustDate(appt.date,1,3))+&quot;|&quot;+//start date / time
			&quot;|&quot;+//start date time offset
			&quot;|&quot;+//start date time offset units
			appt.duration+&quot;|&quot;+//duration
			&quot;min|&quot;+//duration units
			allowSubstitution()+&quot;|&quot;+//allow substitution code
			appt.fillerStatusCode+&quot;|&quot;+//filler status code
			&quot;\n&quot;;
	return aig;
}
function AIL(appt){
	var ail = &quot;AIL|1|&quot;+
	&quot;|&quot;+//segment action code
	randomInt(5)+&quot;|&quot;+//location resource ID
	&quot;|&quot;+//location type
	&quot;|&quot;+//location group
	formatDate(adjustDate(appt.date,1,3))+&quot;|&quot;+//start date / time
	&quot;|&quot;+//start date offset
	&quot;|&quot;+//start date time offset units
	appt.duration+&quot;|&quot;+//duration
	&quot;min|&quot;+//duration units
	allowSubstitution() +&quot;|&quot; +//allow substitution code
	appt.fillerStatusCode+&quot;\n&quot;;
	return ail;
}
function AIP(appt){
	var prov = provider();
	var aip = &quot;AIP|1|&quot; +
			&quot;|&quot; + //segment action code
			formatProvider(provider())+&quot;|&quot; + //personnel resource id
			&quot;|&quot; + //resource role
			&quot;|&quot; + //resource group
			formatDate(adjustDate(appt.date,1,3))+&quot;|&quot; + //start date time
			&quot;|&quot; + //start date time offset
			&quot;|&quot; + //start date time offset units
			&quot;|&quot; + //duration
			&quot;|&quot; + //duration units
			allowSubstitution() + &quot;|&quot;+
			appt.fillerStatusCode+&quot;\n&quot;;
	return aip;
}
function APR(){
	timeSelection = [
		&quot;MON&quot;,
		&quot;TUE&quot;,
		&quot;WED&quot;,
		&quot;THU&quot;,
		&quot;FRI&quot;,
		&quot;SAT&quot;,
		&quot;SUN&quot;,
	];
	var apr = &quot;APR|&quot; +
			valFromList([&quot;OK&quot;,&quot;NO&quot;])+&quot;-&quot;+valFromList(timeSelection)+&quot;|&quot; +
					&quot;\n&quot;;
	return apr;
}
function ARQ(eventType,appt){
	if (eventType == null){eventType = &quot;S01&quot;;}
	var parentFillerId = randomInt(7);
	switch(eventType){
	case &quot;S01&quot;: appt.fillerId = &quot;&quot;;
	parentFillerId = &quot;&quot;;
	break;
	case &quot;S02&quot;:
		break;
	case &quot;S03&quot;:
		break;
	case &quot;S04&quot;:
		break;
	default: throw(&quot;Not a valid event type for SRM. Supported event types are: S01, S02, S03, S04. Try sending SRM^S01 to receive a sample message&quot;);
	}
	var arq = &quot;ARQ|&quot;+
	appt.placerId+&quot;|&quot;+//placer appointment ID
	appt.fillerId+&quot;|&quot;+//filler apopintment ID
	&quot;1|&quot;+//occurrence number
	appt.placerGroup+&quot;|&quot;+//placer group
	&quot;|&quot;+//schedule ID
	&quot;|&quot;+//request event reason
	appt.reason+&quot;|&quot;+//appointment reason
	appt.type+&quot;|&quot;+//appointment type
	appt.duration+&quot;|&quot;+//appointment duration
	&quot;min|&quot;+//appointment duration units
	&quot;|&quot;+//requested start date / time change
	&quot;|&quot;+//priority
	&quot;|&quot;+//repeating interval
	&quot;|&quot;+//repeating interval duration
	appt.placer.id.external+&quot;^&quot;+appt.placer.name.last+&quot;^&quot;+appt.placer.name.first+&quot;|&quot;+ //placer contact person
	appt.placer.phone.home+&quot;|&quot;+ //placer contact phone number
	appt.placer.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+appt.placer.address.state+&quot;^&quot;+appt.placer.address.zip + &quot;|&quot; + //placer contact address
	patientLocation(&quot;E&quot;)+&quot;|&quot;+ //placer contact location
	appt.placer.id.external+&quot;^&quot;+appt.placer.name.last+&quot;^&quot;+appt.placer.name.first+&quot;|&quot;+ //entered by person
	appt.placer.phone.home+&quot;|&quot;+ //entered by phone number
	patientLocation(&quot;E&quot;)+&quot;|&quot;+ //entered by location
	randomInt(6)+&quot;|&quot;+//parent placer id
	parentFillerId;//parent filler id
	return arq.toUpperCase();
}
function ORC(){ //for oru
	var orc = &quot;ORC|RE|&quot;+
	randomInt(9)+&quot;|&quot;+//placer order number
	randomInt(9)+&quot;|&quot;+//filler order number
	&quot;G|&quot;+//placer group number
	&quot;CM|&quot;+//order status = completed
	&quot;|&quot;+//response flag
	&quot;|&quot;+//quantity timing
	&quot;|&quot;+//parent
	&quot;|&quot;+//date time of transaction
	&quot;|&quot;+//entered by
	&quot;|&quot;+//verified by
	&quot;|&quot;+//ordering provider
	&quot;|&quot;+//enterer&apos;s location
	&quot;|&quot;+//call back phone number
	&quot;|&quot;+//order effective date time
	&quot;|&quot;+//order control code reason
	&quot;|&quot;+//entering organization
	&quot;|&quot;+//entering device
	&quot;|&quot;+//action by
	&quot;\n&quot;;
	return orc;
}
function OBR(ord){
	var obr = &quot;OBR|1|&quot;+
	ord.placerId+&quot;|&quot;+//placer order number
	ord.fillerId+&quot;|&quot;+//filler order number
	ord.universalServiceId+&quot;|&quot;+//universal service id
	&quot;|&quot;+//priority - NOT USED
	&quot;|&quot;+//requested date / time - NOT USED
	formatDate(ord.observationBegin)+&quot;|&quot;+//observation date time
	formatDate(ord.observationEnd)+&quot;|&quot;+//observation end date time
	&quot;|&quot;+//collection volume - observation only, leave blank
	formatProvider(ord.provider)+&quot;|&quot;+//collector identifier
	&quot;L|&quot;+//specimen action code = L lab
	&quot;|&quot;+//danger code
	&quot;|&quot;+//relevant clinical info
	&quot;|&quot;+//specimen recieved date time
	&quot;|&quot;+//specimen source
	formatProvider(ord.provider)+&quot;|&quot;+//ordering provider
	ord.provider.phone.work+&quot;|&quot;+//order callback number
	&quot;\n&quot;;
	return obr.toUpperCase();
}
function OBX(obs){
	
	var obx = &quot;OBX|1|&quot;+//
	&quot;NM|&quot;+//value type
	obs.id+&quot;|&quot;+//observation identifier
	&quot;|&quot;+//observation sub-ID - for grouping, leaving blank
	obs.value+&quot;|&quot;+//observation value
	obs.units+&quot;|&quot;+//units
	obs.referenceRange+&quot;|&quot;+//reference range
	&quot;|&quot;+//abnormal flags
	&quot;|&quot;+//probability
	obs.natureOfAbnormal+&quot;|&quot;+//nature of abnormal test
	obs.obsResultStatus+&quot;|&quot;+//observ result status
	formatDate(adjustDate(obs.obsDate,-1,-7))+&quot;|&quot;+//date last obs normal values
	&quot;|&quot;+//user defined access checks
	formatDate(obs.obsDate)+&quot;|&quot;+//date/time of observation
	&quot;CB^Pathology Lab X|&quot;+//producersId
	&quot;|&quot;+//responsible observer
	&quot;|&quot;+//observation method
	&quot;\n&quot;;
	return obx;
}
function mdmOBX(eventType){
	if (eventType == &quot;T01&quot;){return &quot;&quot;;}
	else if (eventType !== &quot;T02&quot;){throw(&quot;Not a valid event type for MDM. Supported event types are: T01, T02. Try sending MDM^T02 to receive a sample message&quot;);}
	var encodedDoc = &quot;Q2xpbmljYWwgc3VtbWFyeTogQmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkLCB0aGUgcGF0aWVudCBsaWtlbHkgaGFzIHZpcmFsIHNpbnVzaXRpcyBjb21tb25seSBjYWxsZWQgYSBoZWFkIGNvbGQuDQpEaWFnbm9zaXM6IFZpcmFsIFNpbnVzaXRpcyANCkRpYWdub3NpcyBJQ0Q6IEowMS45MA0KUHJlc2NyaXB0aW9uOiBiZW56b25hdGF0ZSAoVGVzc2Fsb24gUGVybGVzKSAxMDBtZyBvcmFsIHRhYmxldCAzMCB0YWJsZXRzLCA1IGRheXMgc3VwcGx5LiBUYWtlIG9uZSB0byB0d28gdGFibGV0cyBieSBtb3V0aCB0aHJlZSB0aW1lcyBhIGRheSBhcyBuZWVkZWQuIGRpc3AuIDMwLiBSZWZpbGxzOiAwLCBSZWZpbGwgYXMgbmVlZGVkOiBubywgQWxsb3cgc3Vic3RpdHV0aW9uczogeWVz&quot;;
	var obx = &quot;OBX|1|&quot; +
			&quot;ED|&quot; + // could be ED for epic base64
			randomInt(10)+&quot;^&quot;+&quot;CLINICAL SUMMARY|&quot; + //
			&quot;1|&quot; + //
			&quot;^RTF^^base64^&quot;+encodedDoc+&quot;|&quot; + //
			&quot;|&quot; + //
			&quot;\n&quot;;
	return obx;
}
function TXA(){
	var prov = provider();
	var activityDate = randomDate(2016,2016);
	var authentication = valFromList([&quot;DO&quot;,&quot;IP&quot;,&quot;PA&quot;,&quot;AU&quot;,&quot;LA&quot;]);
	var authenticationPerson = &quot;&quot;;
	var authenticationTime = &quot;&quot;;
	if (authentication == &quot;AU&quot; || authentication == &quot;PA&quot; || authentication == &quot;LA&quot;){
		authenticationPerson = formatProvider(prov);
		authenticationTime = formatDate(activityDate);
	}
	var txa = &quot;TXA|1|&quot;+
	&quot;PN|&quot;+//document type = progress note
	&quot;FT|&quot;+//document content presentation - formatted text 
	formatDate(activityDate)+&quot;|&quot;+//activity date / time
	formatProvider(prov)+&quot;|&quot;+//activity provider
	formatDate(activityDate)+&quot;|&quot;+//origination date time
	formatDate(activityDate)+&quot;|&quot;+//transcription date time
	&quot;|&quot;+//edit date time
	formatProvider(prov)+&quot;|&quot;+//originator code /name
	formatProvider(prov)+&quot;|&quot;+//assigned document authenticator
	&quot;|&quot;+//transcriptionist code
	randomLetter()+randomInt(10)+&quot;|&quot;+//unique document number
	randomLetter()+randomInt(10)+&quot;|&quot;+//parent document number
	&quot;|&quot;+//placer oder number
	&quot;|&quot;+//filler order number
	&quot;Progress Note &quot;+formatDate(activityDate)+&quot;|&quot;+//unique document file name
	authentication+&quot;|&quot;+//document completion status
	&quot;U|&quot;+//document confidentiality status
	&quot;AV|&quot;+//document availability status
	&quot;AC|&quot;+//document storage status
	&quot;|&quot;+//document change reason
	authenticationPerson+&quot;|&quot;+//authentication person
	authenticationTime+&quot;|&quot;+//authentication time stamp
	&quot;\n&quot;;
	return txa.toUpperCase();
}
function DG1(){
	var diag = diagnosis();
	var dg1 = &quot;DG1|1|&quot; +
			&quot;|&quot; + //diagnosis coding method - NOT USED
			diag+&quot;|&quot; + //diagnosis code
			&quot;|&quot; + //description - NOT USED
			formatDate(randomDate(2016,2016))+&quot;|&quot; + //date/time
			&quot;F|&quot; + //type = final
			&quot;\n&quot;;
	return dg1.toUpperCase();
}
function DRG(){
	var drg = &quot;DRG|\n&quot;; // TODO: finish configuring example DRG segment
	return drg.toUpperCase();
}
function PR1(){
	var proc = procedure();
	var pr1 = &quot;PR1|1|&quot; +
			&quot;|&quot;+//procedure coding method NOT USED
			proc+&quot;|&quot;+//procedure code
			&quot;|&quot;+//procedure description NOT USED
			formatDate(randomDate(2016,2016))+&quot;|&quot;+//procedure date
			&quot;|&quot;+//functional type
			&quot;D|&quot;+//functional typediagnostic procedure
			&quot;|&quot;+//minutes
			&quot;\n&quot;; //other elements for backwards compatibility
	return pr1.toUpperCase();
}
function AL1(){
	var allergy = valFromList([
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;Penicillins&quot;,&quot;detail&quot;:&quot;PENICILLINS&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;RIVAROXABAN&quot;,&quot;detail&quot;:&quot;FROM XARELTO&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;VILANTEROL&quot;,&quot;detail&quot;:&quot;FROM ANORO ELLIPTA&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;UMECLIDINIUM&quot;,&quot;detail&quot;:&quot;FROM ANORO ELLIPTA&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;ADHESIVE&quot;,&quot;detail&quot;:&quot;ADHESIVE&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;NICKEL&quot;,&quot;detail&quot;:&quot;NICKEL&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;MORPHINE&quot;,&quot;detail&quot;:&quot;MORPHINE&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;CODEINE&quot;,&quot;detail&quot;:&quot;CODEINE&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;AZITHROMYCIN&quot;,&quot;detail&quot;:&quot;FROM ZITHROMAX Z-PAK&quot;}
	]);
	var al1 = &quot;AL1|1|&quot; +
			&quot;DA|&quot;+//allergy type = drug
			allergy.id+&quot;^&quot;+allergy.text+&quot;^^&quot;+allergy.detail+&quot;|&quot;+//allergy code /mnemonic description
			valFromList([&quot;SV&quot;,&quot;MO&quot;,&quot;MI&quot;])+&quot;|&quot;+//allergy severity
			valFromList([&quot;Rash&quot;,&quot;Breathing difficulty&quot;,&quot;Light sensitivity&quot;,&quot;Hives&quot;,&quot;Nausea&quot;,])+&quot;|&quot;+//allergy reaction
			formatDate(randomDate(2012,2016))+&quot;|&quot;+//identification date
			&quot;\n&quot;;
	return al1.toUpperCase();
}
function ROL(prov){
	var rol = &quot;ROL|1|&quot; +
			&quot;AD|&quot; + //action code
			valFromList([&quot;AT&quot;,&quot;RP&quot;,&quot;AD&quot;,&quot;PP&quot;])+&quot;|&quot; + //role
			formatProvider(prov)+&quot;|&quot; + //role person
			&quot;\n&quot;;
	return rol.toUpperCase();
}	
function GT1(rel){//going to use a relative here, same as NK1
	var begin = randomDate(2011,2016);
	var gt1 = &quot;GT1|1|&quot;+
	rel.id.external+&quot;|&quot; + //Guarantor Number
	rel.name.last+&quot;^&quot;+rel.name.first+&quot;^&quot;+rel.name.initial+&quot;|&quot; + //Guarantor Name
	&quot;|&quot; + //Guarantor Spouse Name
	rel.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+rel.address.state+&quot;^&quot;+rel.address.zip + &quot;|&quot; + //address
	rel.phone.home + &quot;|&quot; + //home phone
	rel.phone.work + &quot;|&quot; + //business phone
	rel.dob+&quot;|&quot; + //Guarantor Date/Time of Birth
	rel.sex+&quot;|&quot; + //Guarantor Sex
	&quot;|&quot; + //Guarantor Type
	&quot;|&quot; + //Guarantor Relationship
	rel.ssn+&quot;|&quot; + //Guarantor SSN
	formatDate(begin)+&quot;|&quot; + //Guarantor Date - Begin
	&quot;|&quot; + //Guarantor Date - End
	&quot;1|&quot; + //Guarantor Priority
	&quot;|&quot; + //Guarantor Employer Name
	&quot;|&quot; + //Guarantor Employer Address
	&quot;|&quot; + //Guarantor Employ Phone Number
	randomInt(6)+&quot;|&quot; + //Guarantor Employee ID Number
	rel.jobStatus+&quot;|&quot; + //Guarantor Employment Status
	&quot;|&quot; + //Guarantor Organization
	YN()+&quot;|&quot; + //Guarantor Billing Hold Flag
	&quot;|&quot; + //Guarantor Credit Rating Code
	&quot;|&quot; + //Guarantor Death Date And Time
	&quot;N|&quot; + //Guarantor Death Flag
	&quot;|&quot; + //Guarantor Charge Adjustment Code
	&quot;|&quot; + //Guarantor Household Annual Income
	&quot;|&quot; + //Guarantor Household Size
	randomInt(10)+&quot;|&quot; + //Guarantor Employer ID Number
	rel.married+&quot;|&quot; + //Guarantor Marital Status Code
	&quot;|&quot; + //Guarantor Hire Effective Date
	&quot;|&quot; + //Employment Stop Date
	&quot;|&quot; + //Living Dependency
	&quot;|&quot; + //Ambulatory Status
	&quot;|&quot; + //Citizenship
	rel.language+&quot;|&quot; + //Primary Language
	valFromList([&quot;R&quot;,&quot;U&quot;,&quot;A&quot;,&quot;F&quot;,&quot;I&quot;])+&quot;|&quot; + //Living Arrangement
	&quot;|&quot; + //Publicity Indicator
	rel.protection+&quot;|&quot; + //Protection Indicator
	rel.student+&quot;|&quot; + //Student Indicator
	rel.religion+&quot;|&quot; + //Religion
	rel.name.mothersMaiden+&quot;|&quot; + //Mother s Maiden Name
	&quot;USA|&quot; + //Nationality Code
	rel.ethnicity+&quot;|&quot; + //Ethnic Group
	&quot;|&quot; + //Contact Person&apos;s Name
	&quot;|&quot; + //Contact Person s Telephone Number
	&quot;|&quot; + //Contact Reason
	&quot;|&quot; + //Contact Relationship Code
	rel.jobTitle+&quot;|&quot; + //Job Title
	&quot;|&quot; + //Job Code/Class
	&quot;|&quot; + //Guarantor Employer&apos;s Organization Name
	&quot;|&quot; + //Handicap
	rel.jobStatus+&quot;|&quot; + //Job Status
	&quot;|&quot; + //Guarantor Financial Class
	rel.race+&quot;|\n&quot;; //Guarantor Race
	return gt1.toUpperCase();
}
function NTE(setId){
	var nte = &quot;NTE|&quot; +
			setId+&quot;|&quot; +
			&quot;TX|&quot; +
			valFromList([
				&quot;Some notes about the patient go here.&quot;,
				&quot;This one seems kind of sick. Maybe we should check them out? &quot;,
				&quot;The patient can&apos;t see what I typed in the chart&quot;,
				&quot;The patient can&apos;t see what I typed in the chart&quot;,
				&quot;I liked the old paper charts better&quot;
			])+&quot;\n&quot;;
	return nte;
}
function IN1(ins){
	
	var in1 = &quot;IN1|&quot; +
	&quot;1|&quot; + //Set ID - Insurance
	ins.planId+&quot;|&quot; + //Insurance Plan ID
	ins.company.id+&quot;|&quot; + //Insurance Company ID
	ins.company.name+&quot;|&quot; + //Insurance Company Name
	ins.company.address.street + &quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+ins.company.address.state+&quot;^&quot;+ins.company.address.zip+&quot;|&quot; + //Insurance Company Address
	ins.company.contactPerson+&quot;|&quot; + //Insurance Co. Contact Ppers
	ins.company.contactPhone+&quot;|&quot; + //Insurance Co Phone Number
	ins.groupNumber+&quot;|&quot; + //Group Number
	ins.groupName+&quot;|&quot; + //Group Name
	ins.groupEmpId+&quot;|&quot; + //Insured&apos;s group employer ID
	ins.groupEmployer+&quot;|&quot; + //Insured&apos;s Group Emp Name
	formatDate(ins.effectiveDate)+&quot;|&quot; + //Plan Effective Date
	valFromList([formatDate(ins.expirationDate),&quot;&quot;])+&quot;|&quot; + //Plan Expiration Date
	ins.authorizationInfo+&quot;|&quot; + //Authorization Information
	ins.planType+&quot;|&quot; + //Plan Type
	ins.insured.name.last + &quot;^&quot; + ins.insured.name.first+&quot;^&quot;+ins.insured.name.initial+&quot;|&quot; + //Name of Insured
	&quot;SELF|&quot; + //Insured&apos;s Relationship to Patient
	ins.insured.dob+&quot;|&quot; + //Insured&apos;s Date of Birth
	ins.insured.address.street + &quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+ins.insured.address.state+&quot;^&quot;+ins.insured.address.zip+&quot;|&quot; + //Insured&apos;s Address
	valFromList([&quot;Y&quot;,&quot;N&quot;,&quot;M&quot;])+&quot;|&quot; + //Assignment of Benefits
	valFromList([&quot;CO&quot;,&quot;IN&quot;])+&quot;|&quot; + //Coordination of Benefits
	&quot;1|&quot; + //Coord of Ben. Priority
	&quot;N|&quot; + //Notice of Admission Code
	&quot;|&quot; + //Notice of Admission Date
	&quot;N|&quot; + //Rpt of Eigibility Code
	&quot;|&quot; + //Rpt of Eligibility Date
	YN()+&quot;|&quot; + //Release Information Code
	&quot;|&quot; + //Pre-Admit Cert
	formatDate(randomDate(2016,2017))+&quot;|&quot; + //Verification Date/Time
	&quot;|&quot; + //Verification By
	valFromList([&quot;S&quot;,&quot;U&quot;])+&quot;|&quot; + //Type of Agreement Code
	&quot;|&quot; + //Billing Status
	&quot;|&quot; + //Lifetime Reserve Days
	&quot;|&quot; + //Delay before lifetime reserve days
	&quot;|&quot; + //Company Plan Code
	ins.policyNumber+&quot;|&quot; + //Policy Number
	ins.deductible+&quot;|&quot; + //Policy Deductible
	&quot;|&quot; + //Policy Limit - Amount
	&quot;|&quot; + //Policy Limit - Days
	&quot;|&quot; + //Room Rate - Semi-Private
	&quot;|&quot; + //Room Rate - Private
	ins.insured.jobStatus+&quot;|&quot; + //Insured&apos;s Employment Status
	ins.insured.sex+&quot;|&quot; + //Insured&apos;s Sex
	ins.insured.employer.address.street + &quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+ins.insured.employer.address.state+&quot;^&quot;+ins.insured.employer.address.zip+&quot;|&quot; + //Insured&apos;s Employer Address
	&quot;|&quot; + //Verification Status
	ins.priorPlanId+&quot;|&quot; + //Prior Insurance Plan ID
	ins.coverageType+&quot;|&quot; + //Coverage Type
	&quot;|&quot; + //Handicap
	ins.insured.id.external+&quot;|\n&quot;;  //Insured&apos;s ID Number
	return in1.toUpperCase();
	
}
function IN2(ins){ 
	var in2 = &quot;IN2|&quot;+
	ins.insured.employeeId+&quot;|&quot; + //Insured&apos;s Employee ID
	ins.insured.ssn+&quot;|&quot; + //Insured&apos;s Social Security Number
	ins.insured.employer.name+&quot;|&quot; + //Insured&apos;s Employer Name
	&quot;|&quot; + //Employer Information Data
	valFromList([&quot;E&quot;,&quot;G&quot;,&quot;I&quot;,&quot;O&quot;,&quot;P&quot;])+&quot;|&quot; + //Mail Claim Party
	&quot;|&quot; + //Medicare Health Ins Card Number
	&quot;|&quot; + //Medicaid Case Name
	&quot;|&quot; + //Medicaid Case Number
	&quot;|&quot; + //Champus Sponsor Name
	&quot;|&quot; + //Champus ID Number
	&quot;|&quot; + //Dependent of Champus Recipient
	&quot;|&quot; + //Champus Organization
	&quot;|&quot; + //Champus Station
	&quot;|&quot; + //Champus Service
	&quot;|&quot; + //Champus Rank/Grade
	&quot;|&quot; + //Champus Status
	&quot;|&quot; + //Champus Retire Date
	&quot;|&quot; + //Champus Non-Avail Cert on File
	&quot;N|&quot; + //Baby Coverage
	&quot;N|&quot; + //Combine Baby Bill
	&quot;|&quot; + //Blood Deductible
	&quot;|&quot; + //Special Coverage Approval Name
	&quot;|&quot; + //Special Coverage Approval Title
	&quot;|&quot; + //Non-Covered Insurance Code
	ins.company.id+&quot;|&quot; + //Payor ID
	ins.policyNumber+&quot;|&quot; + //Payor Subscriber ID
	&quot;1|&quot; + //Eligibility Source
	&quot;|&quot; + //Room Coverage Type/Amount
	&quot;|&quot; + //Policy Type/Amount
	randomInt(1)%5+&quot;^&quot;+ins.deductible+&quot;^&quot;+randomInt(2)+&quot;|&quot; + //Daily Deductible
	&quot;U|&quot; + //Living Dependency
	ins.insured.ambulatoryStatus+&quot;|&quot; + //Ambulatory Status
	ins.insured.citizenship+&quot;|&quot; + //Citizenship
	ins.insured.language+&quot;|&quot; + //Primary Language
	ins.insured.livingArrangement+&quot;|&quot; + //Living Arrangement
	ins.insured.publicity+&quot;|&quot; + //Publicity Indicator
	ins.insured.protection+&quot;|&quot; + //Protection Indicator
	ins.insured.student+&quot;|&quot; + //Student Indicator
	ins.insured.religion+&quot;|&quot; + //Religion
	ins.insured.name.mothersMaiden+&quot;|&quot; + //Mother s Maiden Name
	&quot;USA|&quot; + //Nationality Code
	ins.insured.ethnicity+&quot;|&quot; + //Ethnic Group
	ins.insured.married+&quot;|&quot; + //Marital Status
	formatDate(ins.insured.employer.startDate)+&quot;|&quot; + //Employment Start Date
	&quot;|&quot; + //Employment Stop Date
	ins.insured.jobTitle+&quot;|&quot; + //Job Title
	&quot;|&quot; + //Job Code/Class
	ins.insured.jobStatus+&quot;|&quot; + //Job Status
	&quot;|&quot; + //Employer Contact Person Name
	&quot;|&quot; + //Employer Contact Person Phone Number
	&quot;|&quot; + //Employer Contact Reason
	&quot;|&quot; + //Insured s Contact Person s Name
	&quot;|&quot; + //Insured s Contact Person Telephone Number
	&quot;|&quot; + //Insured s Contact Person Reason
	&quot;|&quot; + //Relationship To The Patient Start Date
	&quot;|&quot; + //Relationship To The Patient Stop Date
	&quot;|&quot; + //Insurance Co. Contact Reason
	&quot;|&quot; + //Insurance Co. Contact Phone Number
	&quot;|&quot; + //Policy Scope
	&quot;|&quot; + //Policy Source
	ins.policyNumber+&quot;|&quot; + //Patient Member Number
	&quot;SEL|&quot; + //Guarantor s Relationship To Insured
	ins.insured.phone.home+&quot;|&quot; + //Insured s Telephone Number - Home
	ins.insured.phone.work+&quot;|&quot; + //Insured s Employer Telephone Number
	&quot;|&quot; + //Military Handicapped Program
	YN()+&quot;|&quot; + //Suspend Flag
	YN()+&quot;|&quot; + //Co-pay Limit Flag
	YN()+&quot;|&quot; + //Stoploss Limit Flag
	&quot;|&quot; + //Insured Organization Name And ID
	&quot;|&quot; + //Insured Employer Organization Name And ID
	ins.insured.race+&quot;|&quot; + //Race
	&quot;SEL|\n&quot; ; //Patient Relationship to Insured
	return in2.toUpperCase();
}
function IN3(ins){
	var in3 = &quot;IN3|&quot; +
	&quot;1|&quot; + //Set ID - Insurance Certification
	ins.cert.certNumber+&quot;|&quot; + //Certification Number
	ins.cert.certBy+&quot;|&quot; + //Certified By
	ins.cert.required+&quot;|&quot; + //Certification Required
	ins.cert.penalty+&quot;|&quot; + //Penalty
	formatDate(ins.cert.certDate)+&quot;|&quot; + //Certification Date/Time
	&quot;|&quot; + //Certification Modify Date/Time
	formatProvider(ins.cert.provider)+&quot;|&quot; + //Operator
	formatDate(ins.cert.certDate)+&quot;|&quot; + //Certification Begin Date
	&quot;|&quot; + //Certification End Date
	valFromList([&quot;AP&quot;,&quot;PE&quot;])+&quot;^&quot;+randomInt(1)+&quot;|&quot; + //Days
	&quot;|&quot; + //Non-Concur Code/Description
	&quot;|&quot; + //Non-Concur Effective Date/Time
	formatProvider(new provider())+&quot;|&quot; + //Physician Reviewer
	formatProvider(ins.cert.provider)+&quot;|&quot; + //Certification Contact
	ins.cert.provider.phone.work+&quot;|&quot; + //Certification Contact Phone Number
	&quot;|&quot; + //Appeal Reason
	&quot;DATICA CERTIFICATION GROUP|&quot; + //Certification Agency
	phoneNumber()+&quot;|&quot; + //Certification Agency Phone Number
	&quot;IPE|&quot; + //Pre-Certification required/Window = inpatient elective
	formatProvider(new provider())+&quot;|&quot; + //Case Manager
	&quot;|&quot; + //Second Opinion Date
	&quot;|&quot; + //Second Opinion Status
	&quot;|&quot; + //Second Opinion Documentation Received
	formatProvider(new provider())+&quot;|\n&quot;; //Second Opinion Physician
	return in3.toUpperCase();
}
function ACC(){
	var acc = &quot;ACC|&quot; + 
	formatDate(randomDate(2016,2016))+&quot;|&quot; + //accident date time
	&quot;V89.2^Person injured in unspecified motor-vehicle accident, traffic^ICD-10|&quot; + //accident code
	&quot;HWY &quot;+randomLetter()+randomInt(2)+&quot;|&quot; + //accident location
	usState()+&quot;|&quot; + //auto accident state
	YN()+&quot;|&quot; + //accident job related indicator
	&quot;N|\n&quot;; //accident death indicator
	return acc.toUpperCase();
}
//in progress ********************

function medication(){
	function giveDetails(){}
		//quantity-timing:
		//quantity^interval^duration^start date/time^end date/time^priority^condition^text
		//create template and then fill out values
		var base = {
				&quot;id&quot;:&quot;00338004902&quot;,
				&quot;name&quot;:&quot;SODIUM CHLORIDE .9%&quot;,
				&quot;unit&quot;:&quot;ML&quot;,
				&quot;form&quot;: &quot;IV&quot;,
		};
		var med = {
				&quot;id&quot;:&quot;687886963&quot;,
				&quot;name&quot;:&quot;SERTRALINE HYDROCHLORIDE&quot;,
				&quot;units&quot;:&quot;MG&quot;,
				&quot;dosageForm&quot;:&quot;TAB&quot;,
				&quot;pharmacyInstructions&quot;:&quot;&quot;,
				&quot;providerInstructions&quot;:&quot;Take 1 tablet by mouth daily&quot;,
				&quot;quantityTiming&quot;:&quot;1&amp;Q1D&quot;,
				&quot;interval&quot;:&quot;DAILY&quot;,
				&quot;strength&quot;:&quot;25&quot;,
				&quot;dispenseAmount&quot;:&quot;30&quot;,
				&quot;indication&quot;:&quot;F32.1^Major depressive disorder, single episode, moderate^ICD-10&quot;,
				&quot;min&quot;:&quot;1&quot;,
				&quot;max&quot;:&quot;&quot; //not used nonvarying dose
		};//med.id+&quot;^&quot;+med.name+&quot;^NDC&quot;

	return med;
}

function RXO(med){
	var rxo = &quot;RXO|&quot; +
	med.id+&quot;^&quot;+med.name+&quot;^NDC&quot;+&quot;|&quot; + //Requested Give Code
	med.min+&quot;|&quot; + //Requested Give Amount - Minimum
	&quot;|&quot; + //Requested Give Amount - Maximum - not used
	med.units+&quot;|&quot; + //Requested Give Units
	med.dosageForm+&quot;|&quot; + //Requested Dosage Form
	&quot;|&quot; + //Provider&apos;s Pharmacy Instructions
	med.providerInstructions+&quot;|&quot; + //Provider&apos;s Administration Instructions
	hospital()+&quot;|&quot; + //Deliver To Location
	valFromList([&quot;N&quot;,&quot;G&quot;,&quot;T&quot;])+&quot;|&quot; + //Allow Substitutions
	&quot;|&quot; + //Requested Dispense Code
	med.dispenseAmount+&quot;|&quot; + //Requested Dispense Amount
	&quot;|&quot; + //Requested Dispense Units
	&quot;|&quot; + //Number of Refills
	&quot;|&quot; + //Ordering Provider&apos;s DEA Number
	&quot;|&quot; + //Pharmacist/Treatment Supplier&apos;s Verifier ID
	YN()+&quot;|&quot; + //Needs Human Review
	&quot;D1|&quot; + //Requested Give Per
	med.strength+&quot;|&quot; + //Requested Give Strength
	med.units+&quot;|&quot; + //Requested Give Strength Units
	med.indication+&quot;|&quot; + //Indication
	&quot;|&quot; + //Requested Give Rate Amount
	&quot;|\n&quot;;//Requested Give Rate Units
	return rxo.toUpperCase();
}
function RXR(){
	var rxr = &quot;RXR|&quot; +
			&quot;|&quot; + //route
			&quot;|&quot; + //site
			&quot;|&quot; + //administration device
			&quot;|\n&quot;; //administration route
	return rxr.toUpperCase();
}
function RXC(){
	var rxc = &quot;RXC|&quot; + 
	&quot;|&quot; + //rx component type
	&quot;|&quot; + //component code
	&quot;|&quot; + //component amount
	&quot;|&quot; + //component units
	&quot;|&quot; + //component strength
	&quot;|\n&quot;; //component strength units
}
function RXE(med){
	var rxe = &quot;RXE|&quot; +
	med.quantityTiming+&quot;|&quot; + // Quantity/Timing
	med.id+&quot;^&quot;+med.name+&quot;^NDC&quot;+&quot;|&quot; + // Give Code
	med.min+&quot;|&quot; + // Give Amount - Minimum
	&quot;|&quot; + // Give Amount - Maximum
	med.units+&quot;|&quot; + // Give Units
	med.dosageForm+&quot;|&quot; + // Give Dosage Form
	med.providerInstructions+&quot;|&quot; + // Provider&apos;s Administration Instructions
	&quot;|&quot; + // Deliver To Location
	valFromList([&quot;N&quot;,&quot;G&quot;,&quot;T&quot;,&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;])+&quot;|&quot; + // Substitution Status
	med.dispenseAmount+&quot;|&quot; + // Dispense Amount
	med.units+&quot;|&quot; + // Dispense Units
	randomInt(1)%3+&quot;|&quot; + // Number of Refills
	&quot;|&quot; + // Ordering Provider&apos;s DEA Number
	&quot;|&quot; + // Pharmacist/Treatment Supplier&apos;s Verifier ID
	&quot;|&quot; + // Prescription Number
	&quot;|&quot; + // Number of Refills Remaining
	&quot;|&quot; + // Number of Refills/Doses Dispensed
	&quot;|&quot; + // Date / time of most recent refill or dose dispensed
	&quot;|&quot; + // Total Daily Dose
	YN()+&quot;|&quot; + // Needs Human Review
	&quot;|&quot; + // Pharmacy/Treatment Supplier&apos;s Special Dispensing Instructions
	&quot;|&quot; + // Give Per
	&quot;|&quot; + // Give Rate Amount
	&quot;|&quot; + // Give Rate Units
	&quot;|&quot; + // Give Strength
	&quot;|&quot; + // Give Strength Units
	&quot;|&quot; + // Give Indication
	&quot;|&quot; + // Dispense Package Size
	&quot;|&quot; + // Dispense Package Size Unit
	&quot;|\n&quot;; // Dispense Package Method
	return rxe.toUpperCase();
}

//to do ********************

function CTI(){}
function UB1(){}
function UB2(){}




//================================================================================
//Helper functions
//================================================================================
function person(sex){
	if (sex == null){
		sex = gender();
	}
	var intDob = randomDate(1910,1970);
	var dob = formatDate(intDob);
	var person = {
			&quot;id&quot;:{
				&quot;internal&quot;:randomInt(8),
				&quot;external&quot;:randomInt(8),
				&quot;alternate&quot;:randomInt(8)
			},
			&quot;account&quot;:randomInt(6),
			&quot;ssn&quot;:900000000+randomInt(8),
			&quot;driversLicense&quot;:&quot;S&quot;+randomInt(15),
			&quot;name&quot;:{
				&quot;last&quot;:lastName(),
				&quot;first&quot;:&quot;&quot;,
				&quot;initial&quot;:randomLetter(),
				&quot;alias&quot;:alias(),
				&quot;mothersMaiden&quot;:lastName()
			},
			&quot;sex&quot;:sex,
			&quot;address&quot;:{
				&quot;street&quot;:street(),
				&quot;state&quot;:usState(),
				&quot;zip&quot;:zipCode()
			},
			&quot;intDob&quot;:intDob,
			&quot;dob&quot;:dob,
			&quot;race&quot;:race(),
			&quot;phone&quot;:{
				&quot;home&quot;:phoneNumber(),
				&quot;work&quot;:phoneNumber()
			},
			&quot;language&quot;:language(),
			&quot;married&quot;:maritalStatus(),
			&quot;religion&quot;:religion(),
			&quot;ethnicity&quot;:ethnicity(),
			&quot;multipleBirth&quot;:YN(),
			&quot;birthPlace&quot;:&quot;MADISON^&quot;+usState(),
			&quot;birthOrder&quot;:randomInt(1)%5+1,
			&quot;citizenship&quot;:&quot;US&quot;,
			&quot;pcp&quot;:&quot;&quot;,//formatProvider(provider()),
			&quot;student&quot;:valFromList(&quot;F&quot;,&quot;N&quot;,&quot;P&quot;,&quot;&quot;),
			&quot;dependent&quot;:valFromList([&quot;M&quot;,&quot;O&quot;,&quot;U&quot;,&quot;W&quot;]),
			&quot;livingArrangement&quot;:valFromList([&quot;A&quot;,&quot;F&quot;,&quot;I&quot;,&quot;R&quot;,&quot;U&quot;]),
			&quot;livingWill&quot;:valFromList([&quot;Y&quot;,&quot;F&quot;,&quot;N&quot;,&quot;I&quot;,&quot;U&quot;]),
			&quot;organDonor&quot;:valFromList([&quot;Y&quot;,&quot;F&quot;,&quot;I&quot;]),
			&quot;separateBill&quot;:YN(),
			&quot;publicity&quot;:valFromList([&quot;F&quot;,&quot;N&quot;,&quot;U&quot;,&quot;O&quot;]),
			&quot;protection&quot;:YN(),
			&quot;ambulatoryStatus&quot;:valFromList([&quot;A0&quot;,&quot;A1&quot;,&quot;A2&quot;,&quot;A3&quot;,&quot;A4&quot;,&quot;A5&quot;,&quot;A6&quot;,&quot;A7&quot;,&quot;A8&quot;,&quot;A9&quot;,&quot;B1&quot;,&quot;B2&quot;,&quot;B3&quot;,&quot;B4&quot;,&quot;B5&quot;,&quot;B6&quot;]),
			&quot;jobStatus&quot;:valFromList([&quot;O&quot;,&quot;P&quot;,&quot;T&quot;,&quot;U&quot;]),
			&quot;jobTitle&quot;:valFromList([&quot;Teacher&quot;,&quot;Painter&quot;,&quot;Software developer&quot;,&quot;Farmer&quot;,&quot;CEO&quot;,&quot;Chef&quot;]),
			&quot;employeeId&quot;:randomInt(7),
			&quot;employer&quot;:{
				&quot;name&quot;:valFromList([&quot;ACME GROUP&quot;,&quot;VANDELAY INDUSTRIES&quot;,&quot;THE HUMAN FUND&quot;]),
				&quot;address&quot;:{
					&quot;street&quot;:street(),
					&quot;state&quot;:usState(),
					&quot;zip&quot;:zipCode()
				},
				&quot;startDate&quot;:randomDate(2015,2016)
			}
	};
	switch (person.sex){
	case &quot;M&quot;: person.name.first  = maleName();
	break;
	case &quot;F&quot;: person.name.first = femaleName();
	}
	return person;
}
function insurance(insured){
	var effDate = randomDate(2016,2017);
	var termDate = adjustYear(effDate,3,3);
	var prov = provider();
	var certDate = adjustDate(effDate,10,20);
	var ins = {
			&quot;planId&quot;:randomLetter()+randomInt(8),
			&quot;company&quot;:{
				&quot;id&quot;: randomInt(8),
				&quot;name&quot;:&quot;DATICA INSURANCE CO&quot;,
				&quot;address&quot;:{
					&quot;street&quot;:street(),
					&quot;state&quot;:usState(),
					&quot;zip&quot;:zipCode()
				},
				&quot;contactPerson&quot;:&quot;&quot;,
				&quot;contactPhone&quot;:phoneNumber()
					},
			&quot;groupNumber&quot;:randomInt(6),
			&quot;groupName&quot;:&quot;INSURANCE GROUP &quot;+randomLetter(),
			&quot;groupEmpId&quot;:randomInt(9),
			&quot;groupEmployer&quot;:insured.employer.name,
			&quot;effectiveDate&quot;:effDate,
			&quot;expirationDate&quot;:termDate,
			&quot;authorizationInfo&quot;:&quot;A&quot;+randomInt(11),
			&quot;planType&quot;:valFromList([&quot;HMO&quot;,&quot;PPO&quot;,&quot;EPO&quot;,&quot;HDHP&quot;,&quot;MCD&quot;]),
			&quot;insured&quot;:insured,
			&quot;policyNumber&quot;:randomLetter()+randomInt(9),
			&quot;priorPlanId&quot;:randomLetter()+randomInt(8),
			&quot;coverageType&quot;:valFromList([&quot;H&quot;,&quot;P&quot;,&quot;B&quot;]),
			&quot;deductible&quot;:valFromList([&quot;0&quot;,&quot;500&quot;,&quot;1000&quot;,&quot;2500&quot;]),
			&quot;cert&quot;:{
				&quot;certNumber&quot;:randomInt(12),
				&quot;required&quot;:YN(),
				&quot;provider&quot;:prov,
				&quot;penalty&quot;:valFromList([&quot;AT&quot;,&quot;PC&quot;]),
				&quot;begins&quot;:certDate,
				&quot;certDate&quot;:certDate
				
			}
			}
	return ins;
}
function order(){ //could use better order services for orm
	var obsDate = randomDate(2016,2016);
	var prov = provider();
	var ord = {
			&quot;placerId&quot;:randomInt(9)+&quot;^DATICAORD&quot;,
			&quot;fillerId&quot;:randomInt(9)+&quot;^DATICAORD&quot;,
			&quot;universalServiceId&quot;:randomInt(6)+&quot;^GEN SCREENING&quot;,
			&quot;observationBegin&quot;:obsDate,
			&quot;observationEnd&quot;:obsDate,
			&quot;provider&quot;:prov
	};
	return ord;
}
function provider(){
	var prov = person();
	
	prov.credential = valFromList([&quot;MD&quot;,&quot;RN&quot;,&quot;PA&quot;,&quot;CRNA&quot;,&quot;NP&quot;])
	return prov;
	//return randomInt(5)+&quot;^&quot;+randomName()+&quot;^^^&quot;+valFromList([&quot;MD&quot;,&quot;RN&quot;,&quot;PA&quot;,&quot;CRNA&quot;,&quot;NP&quot;]);
}
function appointment(){
	var appointment = {
			&quot;placer&quot;:person(),
			&quot;filler&quot;:person(),
			&quot;placerId&quot;:randomInt(7),
			&quot;fillerId&quot;:randomInt(7),
			&quot;placerGroup&quot;:randomInt(7),
			&quot;reason&quot;:valFromList([&quot;CHECKUP&quot;,&quot;EMERGENCY&quot;,&quot;FOLLOWUP&quot;,&quot;ROUTINE&quot;,&quot;WALKIN&quot;]),
			&quot;type&quot;:valFromList([&quot;COMPLETE&quot;,&quot;NORMAL&quot;,&quot;TENTATIVE&quot;]),
			&quot;duration&quot;:((randomInt(1)%4)*15),
			&quot;fillerStatusCode&quot;:valFromList([&quot;PENDING&quot;,&quot;WAITLIST&quot;,&quot;BOOKED&quot;,&quot;STARTED&quot;,&quot;COMPLETE&quot;,&quot;CANCELLED&quot;,&quot;DC&quot;,&quot;DELETED&quot;,&quot;BLOCKED&quot;,&quot;OVERBOOK&quot;]),
			&quot;date&quot;:randomDate(2017,2017)
	};
	return appointment;
}
function relative(pers){
	var sex = gender();
	var relationship = null;
	if (sex== &quot;M&quot;){
		relationship = valFromList([&quot;SPO&quot;,&quot;DOM&quot;,&quot;CHD&quot;,&quot;DEP&quot;,&quot;FTH&quot;,&quot;GRD&quot;,&quot;BRO&quot;,&quot;PAR&quot;,&quot;EMC&quot;,&quot;UNK&quot;,&quot;OTH&quot;]);
	} else if (sex ==&quot;F&quot;){
		relationship = valFromList([&quot;SPO&quot;,&quot;DOM&quot;,&quot;CHD&quot;,&quot;DEP&quot;,&quot;MTH&quot;,&quot;GRD&quot;,&quot;SIS&quot;,&quot;PAR&quot;,&quot;EMC&quot;,&quot;UNK&quot;,&quot;OTH&quot;]);
	}
	var relative= person(sex);
	if (relationship == &quot;CHD&quot;){
		relative.intDob = adjustYear(pers.intDob,18,40);
		relative.dob = formatDate(relative.intDob);
	}else if(relationship == &quot;FTH&quot; || relationship == &quot;MTH&quot; || relationship == &quot;PAR&quot;|| relationship == &quot;GRD&quot;){
		relative.intDob = adjustYear(pers.intDob,-18,-40);
		relative.dob = formatDate(relative.intDob);
	}else if (relationship == &quot;SPO&quot;){
		pers.married = &quot;Y&quot;;
		relative.married = &quot;Y&quot;;
	}
	relative.relationship = relationship;
	//mothers maiden name update
	return relative;}
function pathObs(ord){
	var observations = [
		{&quot;id&quot;:randomInt(6)+&quot;^TSH^L^11580-8^Thyrotropin^LN&quot;,&quot;value&quot;:&quot;2.66&quot;,&quot;units&quot;:&quot;uIU/mL&quot;,&quot;referenceRange&quot;:&quot;0.450-4.500&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^T4,Free(Direct)^L^3024-7^Thyroxine.free^LN&quot;,&quot;value&quot;:&quot;1.61&quot;,&quot;units&quot;:&quot;ng/dL&quot;,&quot;referenceRange&quot;:&quot;0.82-1.77&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^WBC^L^6690-2^Leukocytes^LN&quot;,&quot;value&quot;:&quot;4.1&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;3.4-10.8&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^RBC^L^789-8^Erythrocytes^LN&quot;,&quot;value&quot;:&quot;4.34&quot;,&quot;units&quot;:&quot;x10E6/uL&quot;,&quot;referenceRange&quot;:&quot;3.77-5.28&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Hemoglobin^L^718-7^Hemoglobin^LN&quot;,&quot;value&quot;:&quot;12.4&quot;,&quot;units&quot;:&quot;g/dL&quot;,&quot;referenceRange&quot;:&quot;11.1-15.9&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Hematocrit^L^4544-3^Hematocrit^LN&quot;,&quot;value&quot;:&quot;37.6&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;34.0-46.6&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^MCV^L^787-2^Erythrocyte mean corpuscular volume^LN&quot;,&quot;value&quot;:&quot;87&quot;,&quot;units&quot;:&quot;fL&quot;,&quot;referenceRange&quot;:&quot;79-97&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^MCH^L^785-6^Erythrocyte mean corpuscular hemoglobin^LN&quot;,&quot;value&quot;:&quot;28.6&quot;,&quot;units&quot;:&quot;pg&quot;,&quot;referenceRange&quot;:&quot;26.6-33.0&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^MCHC^L^786-4^Erythrocyte mean corpuscular hemoglobin concentrat^LN&quot;,&quot;value&quot;:&quot;33&quot;,&quot;units&quot;:&quot;g/dL&quot;,&quot;referenceRange&quot;:&quot;31.5-35.7&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^RDW^L^788-0^Erythrocyte distribution width^LN&quot;,&quot;value&quot;:&quot;13.8&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;12.3-15.4&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Platelets^L^777-3^Platelets^LN&quot;,&quot;value&quot;:&quot;228&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;150-379&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Neutrophils^L^770-8^Neutrophils/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;61&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Lymphs^L^736-9^Lymphocytes/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;28&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Monocytes^L^5905-5^Monocytes/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;9&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Eos^L^713-8^Eosinophils/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;2&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Basos^L^706-2^Basophils/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;0&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Neutrophils (Absolute)^L^751-8^Neutrophils^LN&quot;,&quot;value&quot;:&quot;2.5&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;1.4-7.0&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Lymphs (Absolute)^L^731-0^Lymphocytes^LN&quot;,&quot;value&quot;:&quot;1.1&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.7-3.1&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Monocytes(Absolute)^L^742-7^Monocytes^LN&quot;,&quot;value&quot;:&quot;0.4&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.1-0.9&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Eos (Absolute)^L^711-2^Eosinophils^LN&quot;,&quot;value&quot;:&quot;0.1&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.0-0.4&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Baso (Absolute)^L^704-7^Basophils^LN&quot;,&quot;value&quot;:&quot;0&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.0-0.2&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Immature Granulocytes^L^38518-7^Granulocytes.immature/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;0&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Immature Grans (Abs)^L^51584-1^Granulocytes.immature^LN&quot;,&quot;value&quot;:&quot;0&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.0-0.1&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;}
	];
	var obs = valFromList(observations);
	if (ord !== null){obs.obsDate = ord.observationBegin;}
	else {obs.obsDate = randomDate(2016,2016);}
	return obs;
}
function diagnosis(){
	return valFromList([
		&quot;S82.9^Unspecified Fracture of Lower Leg^ICD-10&quot;,
		&quot;J96.91^Respiratory Failure, Unspecified with Hypoxia^ICD-10&quot;,
		&quot;I49.9^Cardiac Arrythmia, unspecified^ICD-10&quot;,
		&quot;S06.0^Concussion^ICD-10&quot;,
		&quot;E11.42^Type 2 Diabetes Mellitus with Diabetic polyneuropathy^ICD-10&quot;,
		&quot;S93.40^Sprain of unspecified ligament of ankle^ICD-10&quot;,
		&quot;G43.11^Migrane with aura,intractable^ICD-10&quot;,
		&quot;M25.531^Pain in right wrist^ICD-10&quot;,
		&quot;H54.2^Low vision, both eyes^ICD-10&quot;
	]);
}
function procedure(){ //CPT codes
	return valFromList([
		&quot;99213^Office Visit^CPT&quot;,
		&quot;36415^Venipuncture with blood draw^CPT&quot;,
		&quot;97813^Acupuncture without electric stimulation^CPT&quot;,
		&quot;71260^CT chest with contrast^CPT&quot;
	]);
}
//================================================================================
//basic functions
//================================================================================
function allowSubstitution(){
	return valFromList([&quot;NO&quot;,&quot;CONFIRM&quot;,&quot;NOTIFY&quot;,&quot;YES&quot;]);
}
function formatProvider(prov){
	return output =  prov.id.internal+&quot;^&quot;+prov.name.last+&quot;^&quot;+prov.name.first+&quot;^&quot;+prov.name.initial+&quot;^^&quot;+prov.credential
}
function hospital(){
	return &quot;DATICA HOSPITAL^^12345^^^DATICA HEALTHCARE&quot;;
}
function clinic(){
	return &quot;DATICA CLINIC^^23456^^^DATICA HEALTHCARE&quot;;
}
function today(){
	var date = new Date();
	return date.getFullYear()+pad(date.getMonth()+1,2)+pad((date.getDate()),2);
}
function YN(){
	return valFromList([&quot;Y&quot;,&quot;N&quot;]);
}
function randomName(){
	return lastName()+&quot;^&quot;+valFromList([maleName(),femaleName()])+&quot;^&quot;+randomLetter(); 
}
function randomLetter(){
	vals = [&quot;A&quot;,
		&quot;B&quot;,
		&quot;C&quot;,
		&quot;D&quot;,
		&quot;E&quot;,
		&quot;F&quot;,
		&quot;G&quot;,
		&quot;H&quot;,
		&quot;I&quot;,
		&quot;J&quot;,
		&quot;K&quot;,
		&quot;L&quot;,
		&quot;M&quot;,
		&quot;N&quot;,
		&quot;O&quot;,
		&quot;P&quot;,
		&quot;Q&quot;,
		&quot;R&quot;,
		&quot;S&quot;,
		&quot;T&quot;,
		&quot;U&quot;,
		&quot;V&quot;,
		&quot;W&quot;,
		&quot;X&quot;,
		&quot;Y&quot;,
		&quot;Z&quot;,
		&quot;&quot;];
	return valFromList(vals);
}
function ethnicity(){
	return valFromList([&quot;H&quot;,&quot;N&quot;,&quot;U&quot;]);
}
function religion(){
	return valFromList([&quot;ABC&quot;,
		&quot;AGN&quot;,
		&quot;AME&quot;,
		&quot;AMT&quot;,
		&quot;ANG&quot;,
		&quot;AOG&quot;,
		&quot;ATH&quot;,
		&quot;BAH&quot;,
		&quot;BAP&quot;,
		&quot;BMA&quot;,
		&quot;BOT&quot;,
		&quot;BRE&quot;,
		&quot;BTA&quot;,
		&quot;BTH&quot;,
		&quot;BUD&quot;,
		&quot;CAT&quot;,
		&quot;CFR&quot;,
		&quot;CHR&quot;,
		&quot;CHS&quot;,
		&quot;CMA&quot;,
		&quot;CNF&quot;,
		&quot;COC&quot;,
		&quot;COG&quot;,
		&quot;COI&quot;,
		&quot;COL&quot;,
		&quot;COM&quot;,
		&quot;COP&quot;,
		&quot;COT&quot;,
		&quot;CRR&quot;,
		&quot;DOC&quot;,
		&quot;EOT&quot;,
		&quot;EPI&quot;,
		&quot;ERL&quot;,
		&quot;EVC&quot;,
		&quot;FRQ&quot;,
		&quot;FUL&quot;,
		&quot;FWB&quot;,
		&quot;GRE&quot;,
		&quot;HIN&quot;,
		&quot;HOT&quot;,
		&quot;HSH&quot;,
		&quot;HVA&quot;,
		&quot;JAI&quot;,
		&quot;JCO&quot;,
		&quot;JEW&quot;,
		&quot;JOR&quot;,
		&quot;JOT&quot;,
		&quot;JRC&quot;,
		&quot;JRF&quot;,
		&quot;JRN&quot;,
		&quot;JWN&quot;,
		&quot;LMS&quot;,
		&quot;LUT&quot;,
		&quot;MEN&quot;,
		&quot;MET&quot;,
		&quot;MOM&quot;,
		&quot;MOS&quot;,
		&quot;MOT&quot;,
		&quot;MSH&quot;,
		&quot;MSU&quot;,
		&quot;NAM&quot;,
		&quot;NAZ&quot;,
		&quot;NOE&quot;,
		&quot;NRL&quot;,
		&quot;ORT&quot;,
		&quot;OTH&quot;,
		&quot;PEN&quot;,
		&quot;PRC&quot;,
		&quot;PRE&quot;,
		&quot;PRO&quot;,
		&quot;REC&quot;,
		&quot;REO&quot;,
		&quot;SAA&quot;,
		&quot;SEV&quot;,
		&quot;SHN&quot;,
		&quot;SIK&quot;,
		&quot;SOU&quot;,
		&quot;SPI&quot;,
		&quot;UCC&quot;,
		&quot;UMD&quot;,
		&quot;UNI&quot;,
		&quot;UNU&quot;,
		&quot;VAR&quot;,
		&quot;WES&quot;,
		&quot;WMC&quot;]);
}
function maritalStatus(){
	return valFromList([&quot;A&quot;,&quot;D&quot;,&quot;I&quot;,&quot;L&quot;,&quot;M&quot;,&quot;S&quot;,&quot;T&quot;,&quot;U&quot;,&quot;W&quot;,&quot;UNK&quot;]);
}
function language(){
	return valFromList([
		&quot;AR&quot;,
		&quot;ASE&quot;,
		&quot;BLU&quot;,
		&quot;BN&quot;,
		&quot;CJD&quot;,
		&quot;CS&quot;,
		&quot;DE&quot;,
		&quot;EL&quot;,
		&quot;EN&quot;,
		&quot;ES&quot;,
		&quot;FA&quot;,
		&quot;FR&quot;,
		&quot;HI&quot;,
		&quot;HR&quot;,
		&quot;HU&quot;,
		&quot;HY&quot;,
		&quot;ID&quot;,
		&quot;ILO&quot;,
		&quot;IT&quot;,
		&quot;JA&quot;,
		&quot;KM&quot;,
		&quot;KO&quot;,
		&quot;LO&quot;,
		&quot;NI&quot;,
		&quot;OTH&quot;,
		&quot;PL&quot;,
		&quot;PT&quot;,
		&quot;RO&quot;,
		&quot;RU&quot;,
		&quot;SK&quot;,
		&quot;SM&quot;,
		&quot;SO&quot;,
		&quot;SR&quot;,
		&quot;TH&quot;,
		&quot;TL&quot;,
		&quot;TO&quot;,
		&quot;UK&quot;,
		&quot;UR&quot;,
		&quot;VI&quot;,
		&quot;YI&quot;,
		&quot;YUH&quot;,
		&quot;ZH&quot;
	]);
	}
function race(){
	return valFromList([&quot;A&quot;,&quot;B&quot;,&quot;H&quot;,&quot;I&quot;,&quot;N&quot;,&quot;O&quot;,&quot;W&quot;,&quot;U&quot;]);
}
function zipCode(){
	return 90000 + randomInt(4);
}
function lastName(){
	var names = [
		&quot;Moore&quot;,
		&quot;Mcdonald&quot;,
		&quot;Pugh&quot;,
		&quot;Noble&quot;,
		&quot;Cross&quot;,
		&quot;Abbott&quot;,
		&quot;Morton&quot;,
		&quot;Wolfe&quot;,
		&quot;Ross&quot;,
		&quot;Harper&quot;,
		&quot;Patterson&quot;,
		&quot;Haney&quot;,
		&quot;Morris&quot;,
		&quot;Jenkins&quot;,
		&quot;Reese&quot;,
		&quot;Lynn&quot;,
		&quot;Mcintyre&quot;,
		&quot;Howard&quot;,
		&quot;Houston&quot;,
		&quot;Melendez&quot;,
		&quot;Sawyer&quot;,
		&quot;Stevenson&quot;,
		&quot;Frost&quot;,
		&quot;Wright&quot;,
		&quot;Ortega&quot;,
		&quot;West&quot;,
		&quot;Wilcox&quot;,
		&quot;Beltran&quot;,
		&quot;Flowers&quot;,
		&quot;Randolph&quot;,
		&quot;Larson&quot;,
		&quot;Ruiz&quot;,
		&quot;Sherman&quot;,
		&quot;Welch&quot;,
		&quot;Mclaughlin&quot;,
		&quot;Small&quot;,
		&quot;Montes&quot;,
		&quot;Cantrell&quot;,
		&quot;Watts&quot;,
		&quot;Schaefer&quot;,
		&quot;Glover&quot;,
		&quot;Boyle&quot;,
		&quot;Hays&quot;,
		&quot;Mueller&quot;,
		&quot;Mcguire&quot;,
		&quot;Hatfield&quot;,
		&quot;Bryant&quot;,
		&quot;Carney&quot;,
		&quot;Baird&quot;,
		&quot;Phelps&quot;
	];
	var lastName = valFromList(names);
	return lastName;
}
function maleName(){
	var names = [&quot;James&quot;,
		&quot;John&quot;,
		&quot;Robert&quot;,
		&quot;Michael&quot;,
		&quot;William&quot;,
		&quot;David&quot;,
		&quot;Richard&quot;,
		&quot;Joseph&quot;,
		&quot;Thomas&quot;,
		&quot;Charles&quot;,
		&quot;Christopher&quot;,
		&quot;Daniel&quot;,
		&quot;Matthew&quot;,
		&quot;Anthony&quot;,
		&quot;Donald&quot;,
		&quot;Mark&quot;,
		&quot;Paul&quot;,
		&quot;Steven&quot;,
		&quot;Andrew&quot;,
		&quot;Kenneth&quot;,
		&quot;George&quot;,
		&quot;Joshua&quot;,
		&quot;Kevin&quot;,
		&quot;Brian&quot;,
		&quot;Edward&quot;,
		&quot;Ronald&quot;,
		&quot;Timothy&quot;,
		&quot;Jason&quot;,
		&quot;Jeffrey&quot;,
		&quot;Ryan&quot;,
		&quot;Gary&quot;,
		&quot;Jacob&quot;,
		&quot;Nicholas&quot;,
		&quot;Eric&quot;,
		&quot;Stephen&quot;,
		&quot;Jonathan&quot;,
		&quot;Larry&quot;,
		&quot;Justin&quot;,
		&quot;Scott&quot;,
		&quot;Frank&quot;,
		&quot;Brandon&quot;,
		&quot;Raymond&quot;,
		&quot;Gregory&quot;,
		&quot;Benjamin&quot;,
		&quot;Samuel&quot;,
		&quot;Patrick&quot;,
		&quot;Alexander&quot;,
		&quot;Jack&quot;,
		&quot;Dennis&quot;,
		&quot;Jerry&quot;,
		&quot;Tyler&quot;,
		&quot;Aaron&quot;,
		&quot;Henry&quot;,
		&quot;Douglas&quot;,
		&quot;Jose&quot;,
		&quot;Peter&quot;,
		&quot;Adam&quot;,
		&quot;Zachary&quot;,
		&quot;Nathan&quot;,
		&quot;Walter&quot;,
		&quot;Harold&quot;,
		&quot;Kyle&quot;,
		&quot;Carl&quot;,
		&quot;Arthur&quot;,
		&quot;Gerald&quot;,
		&quot;Roger&quot;,
		&quot;Keith&quot;,
		&quot;Jeremy&quot;,
		&quot;Terry&quot;,
		&quot;Lawrence&quot;,
		&quot;Sean&quot;,
		&quot;Christian&quot;,
		&quot;Albert&quot;,
		&quot;Joe&quot;,
		&quot;Ethan&quot;,
		&quot;Austin&quot;,
		&quot;Jesse&quot;,
		&quot;Willie&quot;,
		&quot;Billy&quot;,
		&quot;Bryan&quot;,
		&quot;Bruce&quot;,
		&quot;Jordan&quot;,
		&quot;Ralph&quot;,
		&quot;Roy&quot;,
		&quot;Noah&quot;,
		&quot;Dylan&quot;,
		&quot;Eugene&quot;,
		&quot;Wayne&quot;,
		&quot;Alan&quot;,
		&quot;Juan&quot;,
		&quot;Louis&quot;,
		&quot;Russell&quot;,
		&quot;Gabriel&quot;,
		&quot;Randy&quot;,
		&quot;Philip&quot;,
		&quot;Harry&quot;,
		&quot;Vincent&quot;,
		&quot;Bobby&quot;,
		&quot;Johnny&quot;,
		&quot;Logan&quot;];
	var firstName = valFromList(names);
	return firstName;
}
function femaleName(){
	var names = [&quot;Mary&quot;,
		&quot;Patricia&quot;,
		&quot;Jennifer&quot;,
		&quot;Elizabeth&quot;,
		&quot;Linda&quot;,
		&quot;Barbara&quot;,
		&quot;Susan&quot;,
		&quot;Jessica&quot;,
		&quot;Margaret&quot;,
		&quot;Sarah&quot;,
		&quot;Karen&quot;,
		&quot;Nancy&quot;,
		&quot;Betty&quot;,
		&quot;Lisa&quot;,
		&quot;Dorothy&quot;,
		&quot;Sandra&quot;,
		&quot;Ashley&quot;,
		&quot;Kimberly&quot;,
		&quot;Donna&quot;,
		&quot;Carol&quot;,
		&quot;Michelle&quot;,
		&quot;Emily&quot;,
		&quot;Amanda&quot;,
		&quot;Helen&quot;,
		&quot;Melissa&quot;,
		&quot;Deborah&quot;,
		&quot;Stephanie&quot;,
		&quot;Laura&quot;,
		&quot;Rebecca&quot;,
		&quot;Sharon&quot;,
		&quot;Cynthia&quot;,
		&quot;Kathleen&quot;,
		&quot;Amy&quot;,
		&quot;Shirley&quot;,
		&quot;Anna&quot;,
		&quot;Angela&quot;,
		&quot;Ruth&quot;,
		&quot;Brenda&quot;,
		&quot;Pamela&quot;,
		&quot;Nicole&quot;,
		&quot;Katherine&quot;,
		&quot;Virginia&quot;,
		&quot;Catherine&quot;,
		&quot;Christine&quot;,
		&quot;Samantha&quot;,
		&quot;Debra&quot;,
		&quot;Janet&quot;,
		&quot;Rachel&quot;,
		&quot;Carolyn&quot;,
		&quot;Emma&quot;,
		&quot;Maria&quot;,
		&quot;Heather&quot;,
		&quot;Diane&quot;,
		&quot;Julie&quot;,
		&quot;Joyce&quot;,
		&quot;Evelyn&quot;,
		&quot;Frances&quot;,
		&quot;Joan&quot;,
		&quot;Christina&quot;,
		&quot;Kelly&quot;,
		&quot;Victoria&quot;,
		&quot;Lauren&quot;,
		&quot;Martha&quot;,
		&quot;Judith&quot;,
		&quot;Cheryl&quot;,
		&quot;Megan&quot;,
		&quot;Andrea&quot;,
		&quot;Ann&quot;,
		&quot;Alice&quot;,
		&quot;Jean&quot;,
		&quot;Doris&quot;,
		&quot;Jacqueline&quot;,
		&quot;Kathryn&quot;,
		&quot;Hannah&quot;,
		&quot;Olivia&quot;,
		&quot;Gloria&quot;,
		&quot;Marie&quot;,
		&quot;Teresa&quot;,
		&quot;Sara&quot;,
		&quot;Janice&quot;,
		&quot;Julia&quot;,
		&quot;Grace&quot;,
		&quot;Judy&quot;,
		&quot;Theresa&quot;,
		&quot;Rose&quot;,
		&quot;Beverly&quot;,
		&quot;Denise&quot;,
		&quot;Marilyn&quot;,
		&quot;Amber&quot;,
		&quot;Madison&quot;,
		&quot;Danielle&quot;,
		&quot;Brittany&quot;,
		&quot;Diana&quot;,
		&quot;Abigail&quot;,
		&quot;Jane&quot;,
		&quot;Natalie&quot;,
		&quot;Lori&quot;,
		&quot;Tiffany&quot;,
		&quot;Alexis&quot;,
		&quot;Kayla&quot;];
	var firstName = valFromList(names);
	return firstName;
}
function alias(){
	vals = [&quot;Skippy&quot;,
		&quot;Boomer&quot;,
		&quot;Buster&quot;,
		&quot;Froggy&quot;];
	var alias = valFromList(vals);
	return alias;
}
function gender(){
	vals = [&quot;M&quot;,&quot;F&quot;];
	var sex = valFromList(vals);
	return sex;
}
function randomInt(numDigits){
	var upper = Math.pow(10,numDigits);
	var random = Math.floor(Math.random()*upper);
	return random;
}
function usState(){
	var vals = [&quot;AL&quot;,
		&quot;AK&quot;,
		&quot;AZ&quot;,
		&quot;AR&quot;,
		&quot;CA&quot;,
		&quot;CO&quot;,
		&quot;CT&quot;,
		&quot;DE&quot;,
		&quot;FL&quot;,
		&quot;GA&quot;,
		&quot;HI&quot;,
		&quot;ID&quot;,
		&quot;IL&quot;,
		&quot;IN&quot;,
		&quot;IA&quot;,
		&quot;KS&quot;,
		&quot;KY&quot;,
		&quot;LA&quot;,
		&quot;ME&quot;,
		&quot;MD&quot;,
		&quot;MA&quot;,
		&quot;MI&quot;,
		&quot;MN&quot;,
		&quot;MS&quot;,
		&quot;MO&quot;,
		&quot;MT&quot;,
		&quot;NE&quot;,
		&quot;NV&quot;,
		&quot;NH&quot;,
		&quot;NJ&quot;,
		&quot;NM&quot;,
		&quot;NY&quot;,
		&quot;NC&quot;,
		&quot;ND&quot;,
		&quot;OH&quot;,
		&quot;OK&quot;,
		&quot;OR&quot;,
		&quot;PA&quot;,
		&quot;RI&quot;,
		&quot;SC&quot;,
		&quot;SD&quot;,
		&quot;TN&quot;,
		&quot;TX&quot;,
		&quot;UT&quot;,
		&quot;VT&quot;,
		&quot;VA&quot;,
		&quot;WA&quot;,
		&quot;WV&quot;,
		&quot;WI&quot;,
		&quot;WY&quot;];
	var state = valFromList(vals);
	return state
}
function street(){
	var streets = [&quot;Elm&quot;,
		&quot;Oak&quot;,
		&quot;Maple&quot;,
		&quot;Birch&quot;,
		&quot;Cedar&quot;,
		&quot;Chestnut&quot;,
		&quot;Hawthorn&quot;,
		&quot;Juniper&quot;,
		&quot;Ash&quot;,
		&quot;Walnut&quot;];
	var suffix = [
		&quot;LN&quot;,
		&quot;AVE&quot;,
		&quot;CT&quot;,
		&quot;TER&quot;,
		&quot;WAY&quot;,
		&quot;DR&quot;
	];
	var street = randomInt(4) +&quot; &quot;+ valFromList(streets)+&quot; &quot;+ valFromList(suffix);
	return street;
}
function adjustYear(date,minDiff,maxDiff){
	var newDate = new Date(date.getTime());
	var year = date.getFullYear();
	year = year + Math.floor(Math.random()*(maxDiff-minDiff))+minDiff
	newDate.setFullYear(year);
	newDate.setMonth(Math.floor(Math.random()*12));
	newDate.setDate(Math.floor(Math.random()*28));
	return newDate;
}
function adjustDate(date,minDiff,maxDiff){
	var newDate = new Date(date.getTime());
	var date = date.getDate();
	date = date + Math.floor(Math.random()*(maxDiff-minDiff))+minDiff
	newDate.setDate(date);
	return newDate;
}
function randomDate(lower,upper){
	var date = new Date();
	date.setFullYear(Math.floor(Math.random()*(upper-lower))+lower);
	date.setMonth(Math.floor(Math.random()*12));
	date.setDate(Math.floor(Math.random()*28));
	return date;
}
function formatDate(date){
	var output = date.getFullYear()+pad(date.getMonth()+1,2)+pad((date.getDate()),2);
	return output;
}
function pad(n, width, z) {
	  z = z || &apos;0&apos;;
	  n = n + &apos;&apos;;
	  return n.length &gt;= width ? n : new Array(width - n.length + 1).join(z) + n;
	}
function valFromList(array){
	return array[Math.floor(Math.random() * array.length)];
}
function phoneNumber(){
	return pad(800 + randomInt(2),3)+pad(randomInt(3),3)+pad(randomInt(4),4);
}
function patientLocation(indicator){
	var loc = &quot;XXPOC&quot;+&quot;^&quot;+randomInt(3)+&quot;^&quot;+(randomInt(1) % 4)+&quot;^&quot;+&quot;Datica Hospital &quot;+indicator;
	return loc;
}
function price(digits){
	return randomInt(digits)+&quot;.&quot;+pad(randomInt(2),2);
}</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var params = new java.lang.String(connectorMessage.getRawData().toString());
	try{
	var messageType = msg[&apos;row&apos;][&apos;column1&apos;].toString();
	var eventType = msg[&apos;row&apos;][&apos;column2&apos;].toString();

	
	
	channelMap.put(&quot;messageType&quot;,messageType);
	channelMap.put(&quot;eventType&quot;,eventType);
	var sample = generateMessage(messageType,eventType);
	channelMap.put(&quot;sample&quot;,sample);
	responseMap.put(&quot;sampleResp&quot;,sample);
	channelMap.put(&quot;respCode&quot;,&quot;200&quot;);
	channelMap.put(&apos;mirth_type&apos;,messageType+&quot;_&quot;+eventType);}
	catch(e){
		responseMap.put(&quot;sampleResp&quot;,e)
		channelMap.put(&quot;respCode&quot;,&quot;500&quot;);
		throw(e);	
		}
//================================================================================
//Message Functions
//================================================================================
function generateMessage(messageType,eventType){
	var msg = &quot;&quot;;
	switch(messageType){
	case &quot;ADT&quot;: msg = ADT(eventType);
	break;
	case &quot;SIU&quot;: msg = SIU(eventType);
	break;
	case &quot;SRM&quot;: msg = SRM(eventType);
	break;
	case &quot;MDM&quot;: msg = MDM(eventType);
	break;
	case &quot;ORU&quot;: msg = ORU(eventType);
	break;
	case &quot;ORM&quot;: msg = ORM(eventType);
	break;
	case &quot;RAS&quot;: msg = &quot;&quot;;//RAS(eventType);
	default: throw(&quot;Not a supported message type. Currently supports ADT, SIU, SRM, MDM, ORU, ORM. Try sending ADT^A01 to receive a sample message&quot;);
	}
	return msg;
};
function ORU(eventType){
	if (eventType !== &quot;R01&quot;){throw (&quot;Not a supported event type for ORU. Supported event types are: R01. Try sending ORU^R01 to receive a sample message&quot;)}
	var pat = person();
	var ord = order();
	var obs = pathObs(ord);
	msg = MSH(&quot;ORU&quot;,eventType)+PID(pat)+PD1(pat)+NTE(1)+
	PV1(pat)+PV2(pat)+
	ORC(ord)+OBR(ord)+NTE(2)+OBX(obs)+NTE(3);
	return msg.toUpperCase();
}
function SIU(eventType){
	var pat = person();
	var appt = appointment();
	var msg = &quot;&quot;; //add aig
	var ord = order();
	var obs = pathObs(ord);
	msg = MSH(&quot;SIU&quot;,eventType)+SCH(eventType,appt)+NTE(1)+ 
	PID(pat)+PV1(pat)+PV2(pat)+OBX(obs)+DG1()+
	RGS(appt)+AIS(appt)+NTE(2)+AIG(appt)+NTE(3)+AIL(appt)+NTE(4)+AIP(appt)+NTE(5);
	return msg.toUpperCase();
}
function SRM(eventType){
	var pat = person();
	var appt = appointment();
	var msg = &quot;&quot;; //add aig
	var ord = order();
	var obs = pathObs(ord);
	msg = MSH(&quot;SRM&quot;,eventType)+ARQ(eventType,appt)+APR()+NTE(1)+ 
	PID(pat)+PV1(pat)+PV2(pat)+OBX(obs)+DG1()+
	RGS(appt)+AIS(appt)+APR()+NTE(2)+
	AIG(appt)+APR()+NTE(3)+
	AIL(appt)+APR()+NTE(4)+
	AIP(appt)+APR()+NTE(5);
	return msg.toUpperCase();
}
function MDM(eventType){
	var pat = person();
	var appt = appointment();
	var msg = &quot;&quot;;
	msg = MSH(&quot;MDM&quot;,eventType) + EVN(&quot;MDM&quot;,eventType) + PID(pat) + PV1(pat) + TXA() + mdmOBX(eventType);
	return msg.toUpperCase();
}
//in progress *******************
function ORM(eventType){
	if (eventType !== &quot;O01&quot;){throw(&quot;Not a supported event type for ORM. Supported event types are: O01. Try sending ORM^O01 to receive a sample message&quot;);}
	var pat = person();
	var rel = relative(pat);
	var ord = order();
	var obs = pathObs(ord);
	var ins = insurance(pat);
	msg = MSH(&quot;ORM&quot;,eventType)+NTE(1)+
	PID(pat)+PD1(pat)+NTE(2)+
	PV1(pat)+PV2(pat)+
	IN1(ins)+IN2(ins)+IN3(ins)+GT1(rel)+AL1()+
	ORC(ord)+NTE(3)+OBR(ord)+DG1()+OBX(obs)+NTE(3);
	return msg.toUpperCase();
}
function ADT(eventType){
	switch(eventType){
	case &quot;A01&quot;:
	case &quot;A02&quot;:
	case &quot;A03&quot;:
	case &quot;A04&quot;:
	case &quot;A05&quot;:
	case &quot;A06&quot;:
	case &quot;A07&quot;:
	case &quot;A08&quot;:
	case &quot;A13&quot;:
	case &quot;A14&quot;:
	case &quot;A28&quot;:
		break;
	default: throw(&quot;Not a supported message type for ADT. Supported event types are: A01, A02, A03, A04, A05, A06, A07, A08, A13, A14, A28. Try sending ADT^A01 to receive a sample message&quot;);
	break;
	}
	/*
	 * A01 - admit
	 * A02 - transfer
	 * A03 - discharge
	 * A04 - register
	 * A05 - preadmit
	 */
	
	var pat = person();
	var rel = relative(pat);
	var appt = appointment();
	var obs = pathObs(null);
	var prov = provider();
	var ins = insurance(pat);
	var msg = &quot;&quot;;
	msg = MSH(&quot;ADT&quot;,eventType) + EVN(&quot;ADT&quot;,eventType) + PID(pat) + PD1(pat) + NK1(rel) + PV1(pat) + 
	PV2(pat) + DB1(pat) + OBX(obs) +AL1() + DG1() + DRG() + 
	PR1() + ROL(prov) + GT1(rel) + IN1(ins) + IN2(ins) + IN3(ins)+ ACC();
	return msg.toUpperCase();
}
//================================================================================
//Segment Functions
//================================================================================
function MSH(messageType,eventType){
	var msh = &quot;MSH|^~\&amp;|&quot; +
			&quot;DATICA|&quot; + //sending application
			valFromList([hospital(),clinic()])+&quot;|&quot; +
			&quot;EXTERNAL EMR|&quot; + //receiving application
			&quot;EXTERNAL CLINIC|&quot; +
			today()+&quot;|&quot;+ //message date / time
			&quot;|&quot; + //security
			messageType+&quot;^&quot;+eventType+&quot;|&quot;+
			randomInt(7)+&quot;|&quot;+ //message control ID
			valFromList([&quot;D&quot;,&quot;P&quot;,&quot;T&quot;]) +&quot;|&quot;+ //processing ID
			&quot;2.3|&quot; + //hl7 version
			&quot;\n&quot;;
	return msh;
}
function PID(patient){
	var pid = &quot;PID|1|&quot; +
	patient.id.external + &quot;|&quot; + // external ID
	patient.id.internal + &quot;|&quot; + // internal ID
	patient.id.alternate + &quot;|&quot; + // alternate ID
	patient.name.last+&quot;^&quot;+patient.name.first + &quot;|&quot; + //patient name
	patient.name.mothersMaiden + &quot;|&quot; + // mother&apos;s maiden name
	patient.dob + &quot;|&quot; + //DOB
	patient.sex + &quot;|&quot; + //sex
	patient.name.alias + &quot;|&quot; + //alias
	patient.race + &quot;|&quot; + //race
	patient.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+patient.address.state+&quot;^&quot;+patient.address.zip + &quot;|&quot; + //address
	patient.address.zip + &quot;|&quot; + //county code
	patient.phone.home + &quot;|&quot; + //home phone
	patient.phone.work + &quot;|&quot; + //business phone
	patient.language + &quot;|&quot; + //primary language
	patient.married + &quot;|&quot; + //marital status
	patient.religion + &quot;|&quot; + //religion
	patient.account + &quot;|&quot; + //account number
	patient.ssn + &quot;|&quot; + //ssn number
	patient.driversLicense + &quot;|&quot; + //drivers license number
	&quot;&quot; + &quot;|&quot; + //mother&apos;s identifier
	patient.ethnicity + &quot;|&quot; + //ethnic group
	patient.birthPlace + &quot;|&quot; + //birth place
	patient.multipleBirth + &quot;|&quot; + //multiple birth indicator
	patient.birthOrder + &quot;|&quot; + //birth order
	patient.citizenship + &quot;|&quot; + //citizenship
	&quot;&quot; + &quot;|&quot; + //veteran status
	&quot;US^UNITED STATES OF AMERICA&quot; + &quot;|&quot; + //
	&quot;&quot; + &quot;|&quot; + //patient death date
	&quot;N&quot; + &quot;|&quot; + //patient death indicator
	&quot;&quot; + &quot;|\n&quot;; //
	return pid.toUpperCase();
};
function EVN(messageType,eventType){
	evn = &quot;EVN|&quot; +
			messageType+&quot;^&quot;+eventType +&quot;|&quot; +
			today() + &quot;|&quot; +
			today() + &quot;|&quot; +
			&quot;02|&quot; + //event reason = physician request
			randomName()+&quot;|&quot; +
					today()+&quot;\n&quot;; 
	return evn.toUpperCase();
}
function PD1(patient){
	var pd1 = &quot;PD1|&quot; +
			patient.dependent +&quot;|&quot; + //dependent status
			patient.livingArrangement +&quot;|&quot; + //living arrangement
			valFromList([hospital(),clinic()])+&quot;|&quot; + //primary care facility
			formatProvider(provider())+&quot;|&quot; + //pcp
			patient.student + &quot;|&quot; + //student status
				&quot;|&quot; + //handicap
			patient.livingWill+&quot;|&quot; +
			patient.organDonor+&quot;|&quot; +
			patient.separateBill + &quot;|&quot; +
					&quot;|&quot; + //duplicate patient
					patient.publicity + &quot;|&quot; + //publicity indicator
					patient.protection + &quot;\n&quot;;  
	return pd1.toUpperCase();
}
function DB1(patient){
	var personCode = valFromList([&quot;PT&quot;,&quot;GT&quot;,&quot;IN&quot;,&quot;AP&quot;]);
	var personId = null;
	if (personCode == &quot;PT&quot;){
		personId = patient.id.external;
	}else {
		personId = randomInt(6);
	}
	var db1 = &quot;DB1|&quot; +
			&quot;1|&quot; + //set ID
			personCode+&quot;|&quot;+
			personId+&quot;|&quot; +
			YN()+&quot;|&quot; + //disability visit?
			formatDate(randomDate(2016,2016))+ &quot;|&quot; + //disability start date
			formatDate(randomDate(2017,2017))+&quot;|&quot; + //disability end date
			formatDate(randomDate(2018,2018)) + //return to work date
			&quot;\n&quot;;//unable to work date
	return db1;
}
function NK1(rel){ //requires a relative
	var nk1 = &quot;NK1|1|&quot; +
			rel.name.last+&quot;^&quot;+rel.name.first + &quot;|&quot;+ //name
			rel.relationship+&quot;|&quot; + //relationship
			rel.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+rel.address.state+&quot;^&quot;+rel.address.zip + &quot;|&quot; + //address
			rel.phone.home + &quot;|&quot; + //home phone
			rel.phone.work + &quot;|&quot; + //business phone
			&quot;N|&quot; + //contact role = next of kin
			formatDate(randomDate(2012,2016))+&quot;|&quot; + //start date
			&quot;|&quot; + //end date
			rel.jobTitle+&quot;|&quot; + //job title
			&quot;|&quot; + //job code / class
			&quot;|&quot; + //employee number
			&quot;|&quot; + //organization name
			rel.married+&quot;|&quot; + //marital status
			rel.sex+&quot;|&quot; + //sex code
			rel.dob+&quot;|&quot; + //dob
			&quot;U|&quot; + //living dependency
			rel.ambulatoryStatus+&quot;|&quot; + //ambulatory status
			rel.citizenship+&quot;|&quot; + //citizenship
			rel.language+&quot;|&quot; + //language
			rel.livingArrangement+&quot;|&quot; + //living arrangement
			rel.publicity+&quot;|&quot; + //publicity indicator
			rel.protection+&quot;|&quot; + //protection indicator
			rel.student+&quot;|&quot; + //student indicator
			rel.religion+&quot;|&quot; + //religion
			rel.name.mothersMaiden+&quot;|&quot; + //mother&apos;s maiden name
			&quot;US|&quot; + //nationality
			rel.ethnicity+&quot;|&quot; + //ethnic group
			&quot;|&quot; + //contact reason - blank if not org
			&quot;|&quot; + //contact person name blank if not org
			&quot;|&quot; + //contact person phone blank if not org
			&quot;|&quot; + //contact person address blank if not org
			rel.id.external+&quot;|&quot; + //associated party identifiers 
			rel.jobStatus+&quot;|&quot; + //job status
			rel.race+&quot;|&quot; + //race
			&quot;|&quot; + //handicap
			rel.ssn+&quot;|&quot; + //ssn
			&quot;\n&quot;;
	return nk1;
}
function PV1(patient){
	var pv1 = &quot;PV1|1|&quot; +
			valFromList([&quot;E&quot;,&quot;I&quot;,&quot;O&quot;,&quot;P&quot;,&quot;R&quot;,&quot;B&quot;])+&quot;|&quot; + //patient class
			patientLocation(&quot;A&quot;)+&quot;|&quot; + //assigned location
			valFromList([&quot;A&quot;,&quot;E&quot;,&quot;L&quot;,&quot;R&quot;])+&quot;|&quot; + //admission type
			randomInt(6)+&quot;|&quot; + //preadmit number
			patientLocation(&quot;B&quot;)+&quot;|&quot; + //prior patient location
			formatProvider(provider())+&quot;|&quot; + //attending doctor
			formatProvider(provider())+&quot;|&quot; + //referring doctor
			formatProvider(provider())+&quot;|&quot; + //consulting doctor
			valFromList([&quot;MED&quot;,&quot;SUR&quot;,&quot;URO&quot;,&quot;PUL&quot;,&quot;CAR&quot;])+&quot;|&quot; + //hospital service
			patientLocation(&quot;A&quot;)+&quot;|&quot; + //temporary location
			&quot;N|&quot; + //preadmit test indicator
			&quot;|&quot; + //readmission indicator - either R or null
			randomInt(1)+&quot;|&quot; + //admit source - 1-9
			patient.ambulatoryStatus+&quot;|&quot; + //ambulatory status
			&quot;|&quot; + //vip indicator - leaving blank
			formatProvider(provider())+&quot;|&quot; + //admitting doctor
			&quot;U|&quot; + //patient type - can&apos;t find suggested values
			randomInt(6)+&quot;|&quot; + //visit number
			&quot;A23|&quot; + //financial class
			&quot;R|&quot; + //charge price indicator
			&quot;N|&quot; + //courtesy code
			&quot;G|&quot; + //credit rating
			&quot;44|&quot; + //contract code
			formatDate(randomDate(2015,2016))+&quot;|&quot; + //contract effective date
			price(3)+&quot;|&quot; + //contract amount
			randomInt(1)+&quot;|&quot; + //contract period
			&quot;C|&quot; + //interest code
			&quot;B|&quot; + //transfer to bad debt code
			&quot;|&quot; + //transfer to bad debt date
			&quot;|&quot; + //bad debt agency code
			&quot;|&quot; + //bad debt transfer amount
			&quot;|&quot; + //bad debt recovery amount
			&quot;|&quot; + //delete account indicator
			&quot;|&quot; + //delete account date
			&quot;|&quot; + //discharge disposition
			&quot;|&quot; + //discharged to location
			&quot;|&quot; + //diet type
			&quot;|&quot; + //servicing facility
			&quot;|&quot; + //bed status
			&quot;|&quot; + //account status
			&quot;|&quot; + //pending location
			&quot;|&quot; + //prior temporary location
			&quot;\n&quot;;
	return pv1;
}
function PV2(patient){
	var pv2 = &quot;PV2|&quot; +
			patientLocation(&quot;D&quot;)+&quot;|&quot; + //prior pending location
			&quot;ZD|&quot; + //accommodation code
			diagnosis()+&quot;|&quot; + //admit reason
			&quot;|&quot; + //transfer reason
			valFromList([&quot;watch&quot;,&quot;wallet&quot;,&quot;cellphone&quot;,&quot;ring&quot;])+&quot;|&quot; + //patient valuables
			&quot;Frontdesk A|&quot; + //patient valuables location
			valFromList([&quot;TE&quot;,&quot;&quot;])+&quot;|&quot; + //visit user code
			&quot;|&quot; + //expected admit date
			&quot;|&quot; + //expected discharge date
			&quot;|&quot; + //estimated length of stay
			&quot;|&quot; + //actual length of stay
			&quot;|&quot; + //visit description
			&quot;|&quot; + //referral source
			&quot;|&quot; + //previous service date
			&quot;|&quot; + //illness related indicator
			&quot;|&quot; + //purge status code
			&quot;|&quot; + //purge status date
			&quot;|&quot; + //special program code
			&quot;|&quot; + //retention indicator
			&quot;|&quot; + //expected number of insurance plans
			&quot;|&quot; + //visit publicity code
			&quot;|&quot; + //visit protection indicator
			&quot;|&quot; + //clinic organization name
			&quot;|&quot; + //patient status code
			&quot;|&quot; + //visit priority code
			&quot;|&quot; + //previous treatment date
			&quot;|&quot; + //expected discharge disposition
			&quot;|&quot; + //signature on file date
			&quot;|&quot; + //first similar illness date
			&quot;|&quot; + //patient charge adjustment code
			&quot;|&quot; + //recurring service code
			&quot;|&quot; + //billing media code
			&quot;|&quot; + //expected surgery date and time
			&quot;|&quot; + //military partnership code
			&quot;|&quot; + //military nonavailability code
			&quot;|&quot; + //newborn baby indicator
			&quot;|&quot; + //baby detained indicator
			&quot;\n&quot;;
	return pv2;
}
function SCH(eventType,appt){//* need to square up statuses with event type
	if (eventType == null){eventType = &quot;S12&quot;;}
	var eventReason = &quot;&quot;;
	switch(eventType){
	case &quot;S12&quot;: eventReason = &quot;BOOKED&quot;;
				appt.fillerStatusCode = &quot;BOOKED&quot;
		break;
	case &quot;S14&quot;: appt.fillerStatusCode = &quot;MODIFY&quot;;
	eventReason = &quot;MODIFY&quot;;
		break;
	case &quot;S13&quot;: appt.fillerStatusCode = &quot;RESCHED&quot;;
				eventReason = &quot;RESCHED&quot;;
		break;
	case &quot;S15&quot;: appt.fillerStatusCode = &quot;CANCELLED&quot;;
				eventReason = &quot;CANCELED&quot;;
		break;
	case &quot;S26&quot;: appt.fillerStatusCode = &quot;NOSHOW&quot;;
	eventReason = &quot;NOSHOW&quot;;
		break;
		default: throw(&quot;Not a valid event type for SIU. Supported event types are S12, S13, S14, S15, and S26. Try sending SIU^S12 to receive a sample message.&quot;);
	}
	var sch = &quot;SCH|&quot;+
	appt.placerId+&quot;|&quot;+ //placer appointment ID
	appt.fillerId+&quot;|&quot;+ //filler appointment ID
	&quot;|&quot;+ //occurrence number
	appt.placerGroup+&quot;|&quot;+ //placer group number
	&quot;|&quot;+ //schedule ID
	eventReason+&quot;|&quot;+ //event reason
	appt.reason+&quot;|&quot;+ //appointment reason
	appt.type+&quot;|&quot;+ //appointment type
	appt.duration+&quot;|&quot;+ //appointment duration
	&quot;min|&quot;+ //appointment duration units
	&quot;|&quot;+ //appointment timing quantity
	appt.placer.id.external+&quot;^&quot;+appt.placer.name.last+&quot;^&quot;+appt.placer.name.first+&quot;|&quot;+ //placer contact person
	appt.placer.phone.home+&quot;|&quot;+ //placer contact phone number
	appt.placer.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+appt.placer.address.state+&quot;^&quot;+appt.placer.address.zip + &quot;|&quot; + //placer contact address
	patientLocation(&quot;E&quot;)+&quot;|&quot;+ //placer contact location
	appt.filler.id.external+&quot;^&quot;+appt.filler.name.last+&quot;^&quot;+appt.filler.name.first+&quot;|&quot;+ //filler contact person
	appt.filler.phone.home+&quot;|&quot;+ //placer contact phone number
	appt.filler.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+appt.filler.address.state+&quot;^&quot;+appt.filler.address.zip + &quot;|&quot; + //placer contact address
	patientLocation(&quot;F&quot;)+&quot;|&quot;+ //placer contact location
	appt.placer.id.external+&quot;^&quot;+appt.placer.name.last+&quot;^&quot;+appt.placer.name.first+&quot;|&quot;+ //entered by person
	appt.placer.phone.home+&quot;|&quot;+ //entered by phone number
	patientLocation(&quot;E&quot;)+&quot;|&quot;+ //entered by location
	randomInt(7)+&quot;|&quot;+ //parent placer appointment ID
	randomInt(7)+&quot;|&quot;+//parent filler appointment ID
	appt.fillerStatusCode+&quot;|&quot;+//filler status code
	&quot;\n&quot;;
	
	return sch.toUpperCase();
}
function RGS(){ //add realistic rgs resources
	var rgs = &quot;RGS|&quot; +
			&quot;1|&quot; +
			&quot;|&quot; +
			randomInt(9)+&quot;|\n&quot;;
			return rgs;
}
function AIS(appt){
	
	var ais = &quot;AIS|1|&quot; +
			&quot;|&quot;+//segment action code
			randomInt(6)+&quot;|&quot;+//universal service identifier
			formatDate(adjustDate(appt.date,0,3))+&quot;|&quot;+//start date time
			&quot;|&quot;+//start date time offset
			&quot;|&quot;+//start date time offset units
			appt.duration+&quot;|&quot;+//duration
			&quot;min|&quot;+//duration units
			allowSubstitution()+&quot;|&quot;+//allow substitution code
			appt.fillerStatusCode+&quot;\n&quot;;//filler status code
			
	return ais;
}
function AIG(appt){
	var resource = valFromList([ //https://hcpcs.codes/l-codes/
		&quot;A4215^SYRINGE, STERILE, ANY SIZE, EACH^HCPCS&quot;,
		&quot;A4217^Sterile water/saline, 500 ml^HCPCS&quot;,
		&quot;A4259^LANCETS, PER BOX OF 100^HCPCS&quot;,
		&quot;C1726^Catheter, balloon dilatation, non-vascular^HCPCS&quot;,
		&quot;C1729^CATHETER, DRAINAGE^HCPCS&quot;,
	]);
	var aig = &quot;AIG|1|&quot; +
			&quot;|&quot;+//segment action code - only needed when modifying
			resource+&quot;|&quot;+//resource id
			&quot;|&quot;+//resource type
			&quot;|&quot;+//resource group
			&quot;|&quot;+//resource quantity
			&quot;|&quot;+//resource quantity units
			formatDate(adjustDate(appt.date,1,3))+&quot;|&quot;+//start date / time
			&quot;|&quot;+//start date time offset
			&quot;|&quot;+//start date time offset units
			appt.duration+&quot;|&quot;+//duration
			&quot;min|&quot;+//duration units
			allowSubstitution()+&quot;|&quot;+//allow substitution code
			appt.fillerStatusCode+&quot;|&quot;+//filler status code
			&quot;\n&quot;;
	return aig;
}
function AIL(appt){
	var ail = &quot;AIL|1|&quot;+
	&quot;|&quot;+//segment action code
	randomInt(5)+&quot;|&quot;+//location resource ID
	&quot;|&quot;+//location type
	&quot;|&quot;+//location group
	formatDate(adjustDate(appt.date,1,3))+&quot;|&quot;+//start date / time
	&quot;|&quot;+//start date offset
	&quot;|&quot;+//start date time offset units
	appt.duration+&quot;|&quot;+//duration
	&quot;min|&quot;+//duration units
	allowSubstitution() +&quot;|&quot; +//allow substitution code
	appt.fillerStatusCode+&quot;\n&quot;;
	return ail;
}
function AIP(appt){
	var prov = provider();
	var aip = &quot;AIP|1|&quot; +
			&quot;|&quot; + //segment action code
			formatProvider(provider())+&quot;|&quot; + //personnel resource id
			&quot;|&quot; + //resource role
			&quot;|&quot; + //resource group
			formatDate(adjustDate(appt.date,1,3))+&quot;|&quot; + //start date time
			&quot;|&quot; + //start date time offset
			&quot;|&quot; + //start date time offset units
			&quot;|&quot; + //duration
			&quot;|&quot; + //duration units
			allowSubstitution() + &quot;|&quot;+
			appt.fillerStatusCode+&quot;\n&quot;;
	return aip;
}
function APR(){
	timeSelection = [
		&quot;MON&quot;,
		&quot;TUE&quot;,
		&quot;WED&quot;,
		&quot;THU&quot;,
		&quot;FRI&quot;,
		&quot;SAT&quot;,
		&quot;SUN&quot;,
	];
	var apr = &quot;APR|&quot; +
			valFromList([&quot;OK&quot;,&quot;NO&quot;])+&quot;-&quot;+valFromList(timeSelection)+&quot;|&quot; +
					&quot;\n&quot;;
	return apr;
}
function ARQ(eventType,appt){
	if (eventType == null){eventType = &quot;S01&quot;;}
	var parentFillerId = randomInt(7);
	switch(eventType){
	case &quot;S01&quot;: appt.fillerId = &quot;&quot;;
	parentFillerId = &quot;&quot;;
	break;
	case &quot;S02&quot;:
		break;
	case &quot;S03&quot;:
		break;
	case &quot;S04&quot;:
		break;
	default: throw(&quot;Not a valid event type for SRM. Supported event types are: S01, S02, S03, S04. Try sending SRM^S01 to receive a sample message&quot;);
	}
	var arq = &quot;ARQ|&quot;+
	appt.placerId+&quot;|&quot;+//placer appointment ID
	appt.fillerId+&quot;|&quot;+//filler apopintment ID
	&quot;1|&quot;+//occurrence number
	appt.placerGroup+&quot;|&quot;+//placer group
	&quot;|&quot;+//schedule ID
	&quot;|&quot;+//request event reason
	appt.reason+&quot;|&quot;+//appointment reason
	appt.type+&quot;|&quot;+//appointment type
	appt.duration+&quot;|&quot;+//appointment duration
	&quot;min|&quot;+//appointment duration units
	&quot;|&quot;+//requested start date / time change
	&quot;|&quot;+//priority
	&quot;|&quot;+//repeating interval
	&quot;|&quot;+//repeating interval duration
	appt.placer.id.external+&quot;^&quot;+appt.placer.name.last+&quot;^&quot;+appt.placer.name.first+&quot;|&quot;+ //placer contact person
	appt.placer.phone.home+&quot;|&quot;+ //placer contact phone number
	appt.placer.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+appt.placer.address.state+&quot;^&quot;+appt.placer.address.zip + &quot;|&quot; + //placer contact address
	patientLocation(&quot;E&quot;)+&quot;|&quot;+ //placer contact location
	appt.placer.id.external+&quot;^&quot;+appt.placer.name.last+&quot;^&quot;+appt.placer.name.first+&quot;|&quot;+ //entered by person
	appt.placer.phone.home+&quot;|&quot;+ //entered by phone number
	patientLocation(&quot;E&quot;)+&quot;|&quot;+ //entered by location
	randomInt(6)+&quot;|&quot;+//parent placer id
	parentFillerId;//parent filler id
	return arq.toUpperCase();
}
function ORC(){ //for oru
	var orc = &quot;ORC|RE|&quot;+
	randomInt(9)+&quot;|&quot;+//placer order number
	randomInt(9)+&quot;|&quot;+//filler order number
	&quot;G|&quot;+//placer group number
	&quot;CM|&quot;+//order status = completed
	&quot;|&quot;+//response flag
	&quot;|&quot;+//quantity timing
	&quot;|&quot;+//parent
	&quot;|&quot;+//date time of transaction
	&quot;|&quot;+//entered by
	&quot;|&quot;+//verified by
	&quot;|&quot;+//ordering provider
	&quot;|&quot;+//enterer&apos;s location
	&quot;|&quot;+//call back phone number
	&quot;|&quot;+//order effective date time
	&quot;|&quot;+//order control code reason
	&quot;|&quot;+//entering organization
	&quot;|&quot;+//entering device
	&quot;|&quot;+//action by
	&quot;\n&quot;;
	return orc;
}
function OBR(ord){
	var obr = &quot;OBR|1|&quot;+
	ord.placerId+&quot;|&quot;+//placer order number
	ord.fillerId+&quot;|&quot;+//filler order number
	ord.universalServiceId+&quot;|&quot;+//universal service id
	&quot;|&quot;+//priority - NOT USED
	&quot;|&quot;+//requested date / time - NOT USED
	formatDate(ord.observationBegin)+&quot;|&quot;+//observation date time
	formatDate(ord.observationEnd)+&quot;|&quot;+//observation end date time
	&quot;|&quot;+//collection volume - observation only, leave blank
	formatProvider(ord.provider)+&quot;|&quot;+//collector identifier
	&quot;L|&quot;+//specimen action code = L lab
	&quot;|&quot;+//danger code
	&quot;|&quot;+//relevant clinical info
	&quot;|&quot;+//specimen recieved date time
	&quot;|&quot;+//specimen source
	formatProvider(ord.provider)+&quot;|&quot;+//ordering provider
	ord.provider.phone.work+&quot;|&quot;+//order callback number
	&quot;\n&quot;;
	return obr.toUpperCase();
}
function OBX(obs){
	
	var obx = &quot;OBX|1|&quot;+//
	&quot;NM|&quot;+//value type
	obs.id+&quot;|&quot;+//observation identifier
	&quot;|&quot;+//observation sub-ID - for grouping, leaving blank
	obs.value+&quot;|&quot;+//observation value
	obs.units+&quot;|&quot;+//units
	obs.referenceRange+&quot;|&quot;+//reference range
	&quot;|&quot;+//abnormal flags
	&quot;|&quot;+//probability
	obs.natureOfAbnormal+&quot;|&quot;+//nature of abnormal test
	obs.obsResultStatus+&quot;|&quot;+//observ result status
	formatDate(adjustDate(obs.obsDate,-1,-7))+&quot;|&quot;+//date last obs normal values
	&quot;|&quot;+//user defined access checks
	formatDate(obs.obsDate)+&quot;|&quot;+//date/time of observation
	&quot;CB^Pathology Lab X|&quot;+//producersId
	&quot;|&quot;+//responsible observer
	&quot;|&quot;+//observation method
	&quot;\n&quot;;
	return obx;
}
function mdmOBX(eventType){
	if (eventType == &quot;T01&quot;){return &quot;&quot;;}
	else if (eventType !== &quot;T02&quot;){throw(&quot;Not a valid event type for MDM. Supported event types are: T01, T02. Try sending MDM^T02 to receive a sample message&quot;);}
	var encodedDoc = &quot;Q2xpbmljYWwgc3VtbWFyeTogQmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkLCB0aGUgcGF0aWVudCBsaWtlbHkgaGFzIHZpcmFsIHNpbnVzaXRpcyBjb21tb25seSBjYWxsZWQgYSBoZWFkIGNvbGQuDQpEaWFnbm9zaXM6IFZpcmFsIFNpbnVzaXRpcyANCkRpYWdub3NpcyBJQ0Q6IEowMS45MA0KUHJlc2NyaXB0aW9uOiBiZW56b25hdGF0ZSAoVGVzc2Fsb24gUGVybGVzKSAxMDBtZyBvcmFsIHRhYmxldCAzMCB0YWJsZXRzLCA1IGRheXMgc3VwcGx5LiBUYWtlIG9uZSB0byB0d28gdGFibGV0cyBieSBtb3V0aCB0aHJlZSB0aW1lcyBhIGRheSBhcyBuZWVkZWQuIGRpc3AuIDMwLiBSZWZpbGxzOiAwLCBSZWZpbGwgYXMgbmVlZGVkOiBubywgQWxsb3cgc3Vic3RpdHV0aW9uczogeWVz&quot;;
	var obx = &quot;OBX|1|&quot; +
			&quot;ED|&quot; + // could be ED for epic base64
			randomInt(10)+&quot;^&quot;+&quot;CLINICAL SUMMARY|&quot; + //
			&quot;1|&quot; + //
			&quot;^RTF^^base64^&quot;+encodedDoc+&quot;|&quot; + //
			&quot;|&quot; + //
			&quot;\n&quot;;
	return obx;
}
function TXA(){
	var prov = provider();
	var activityDate = randomDate(2016,2016);
	var authentication = valFromList([&quot;DO&quot;,&quot;IP&quot;,&quot;PA&quot;,&quot;AU&quot;,&quot;LA&quot;]);
	var authenticationPerson = &quot;&quot;;
	var authenticationTime = &quot;&quot;;
	if (authentication == &quot;AU&quot; || authentication == &quot;PA&quot; || authentication == &quot;LA&quot;){
		authenticationPerson = formatProvider(prov);
		authenticationTime = formatDate(activityDate);
	}
	var txa = &quot;TXA|1|&quot;+
	&quot;PN|&quot;+//document type = progress note
	&quot;FT|&quot;+//document content presentation - formatted text 
	formatDate(activityDate)+&quot;|&quot;+//activity date / time
	formatProvider(prov)+&quot;|&quot;+//activity provider
	formatDate(activityDate)+&quot;|&quot;+//origination date time
	formatDate(activityDate)+&quot;|&quot;+//transcription date time
	&quot;|&quot;+//edit date time
	formatProvider(prov)+&quot;|&quot;+//originator code /name
	formatProvider(prov)+&quot;|&quot;+//assigned document authenticator
	&quot;|&quot;+//transcriptionist code
	randomLetter()+randomInt(10)+&quot;|&quot;+//unique document number
	randomLetter()+randomInt(10)+&quot;|&quot;+//parent document number
	&quot;|&quot;+//placer oder number
	&quot;|&quot;+//filler order number
	&quot;Progress Note &quot;+formatDate(activityDate)+&quot;|&quot;+//unique document file name
	authentication+&quot;|&quot;+//document completion status
	&quot;U|&quot;+//document confidentiality status
	&quot;AV|&quot;+//document availability status
	&quot;AC|&quot;+//document storage status
	&quot;|&quot;+//document change reason
	authenticationPerson+&quot;|&quot;+//authentication person
	authenticationTime+&quot;|&quot;+//authentication time stamp
	&quot;\n&quot;;
	return txa.toUpperCase();
}
function DG1(){
	var diag = diagnosis();
	var dg1 = &quot;DG1|1|&quot; +
			&quot;|&quot; + //diagnosis coding method - NOT USED
			diag+&quot;|&quot; + //diagnosis code
			&quot;|&quot; + //description - NOT USED
			formatDate(randomDate(2016,2016))+&quot;|&quot; + //date/time
			&quot;F|&quot; + //type = final
			&quot;\n&quot;;
	return dg1.toUpperCase();
}
function DRG(){
	var drg = &quot;DRG|\n&quot;; // TODO: finish configuring example DRG segment
	return drg.toUpperCase();
}
function PR1(){
	var proc = procedure();
	var pr1 = &quot;PR1|1|&quot; +
			&quot;|&quot;+//procedure coding method NOT USED
			proc+&quot;|&quot;+//procedure code
			&quot;|&quot;+//procedure description NOT USED
			formatDate(randomDate(2016,2016))+&quot;|&quot;+//procedure date
			&quot;|&quot;+//functional type
			&quot;D|&quot;+//functional typediagnostic procedure
			&quot;|&quot;+//minutes
			&quot;\n&quot;; //other elements for backwards compatibility
	return pr1.toUpperCase();
}
function AL1(){
	var allergy = valFromList([
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;Penicillins&quot;,&quot;detail&quot;:&quot;PENICILLINS&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;RIVAROXABAN&quot;,&quot;detail&quot;:&quot;FROM XARELTO&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;VILANTEROL&quot;,&quot;detail&quot;:&quot;FROM ANORO ELLIPTA&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;UMECLIDINIUM&quot;,&quot;detail&quot;:&quot;FROM ANORO ELLIPTA&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;ADHESIVE&quot;,&quot;detail&quot;:&quot;ADHESIVE&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;NICKEL&quot;,&quot;detail&quot;:&quot;NICKEL&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;MORPHINE&quot;,&quot;detail&quot;:&quot;MORPHINE&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;CODEINE&quot;,&quot;detail&quot;:&quot;CODEINE&quot;},
		{&quot;id&quot;:&quot;F&quot;+randomInt(9),&quot;text&quot;:&quot;AZITHROMYCIN&quot;,&quot;detail&quot;:&quot;FROM ZITHROMAX Z-PAK&quot;}
	]);
	var al1 = &quot;AL1|1|&quot; +
			&quot;DA|&quot;+//allergy type = drug
			allergy.id+&quot;^&quot;+allergy.text+&quot;^^&quot;+allergy.detail+&quot;|&quot;+//allergy code /mnemonic description
			valFromList([&quot;SV&quot;,&quot;MO&quot;,&quot;MI&quot;])+&quot;|&quot;+//allergy severity
			valFromList([&quot;Rash&quot;,&quot;Breathing difficulty&quot;,&quot;Light sensitivity&quot;,&quot;Hives&quot;,&quot;Nausea&quot;,])+&quot;|&quot;+//allergy reaction
			formatDate(randomDate(2012,2016))+&quot;|&quot;+//identification date
			&quot;\n&quot;;
	return al1.toUpperCase();
}
function ROL(prov){
	var rol = &quot;ROL|1|&quot; +
			&quot;AD|&quot; + //action code
			valFromList([&quot;AT&quot;,&quot;RP&quot;,&quot;AD&quot;,&quot;PP&quot;])+&quot;|&quot; + //role
			formatProvider(prov)+&quot;|&quot; + //role person
			&quot;\n&quot;;
	return rol.toUpperCase();
}	
function GT1(rel){//going to use a relative here, same as NK1
	var begin = randomDate(2011,2016);
	var gt1 = &quot;GT1|1|&quot;+
	rel.id.external+&quot;|&quot; + //Guarantor Number
	rel.name.last+&quot;^&quot;+rel.name.first+&quot;^&quot;+rel.name.initial+&quot;|&quot; + //Guarantor Name
	&quot;|&quot; + //Guarantor Spouse Name
	rel.address.street+&quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+rel.address.state+&quot;^&quot;+rel.address.zip + &quot;|&quot; + //address
	rel.phone.home + &quot;|&quot; + //home phone
	rel.phone.work + &quot;|&quot; + //business phone
	rel.dob+&quot;|&quot; + //Guarantor Date/Time of Birth
	rel.sex+&quot;|&quot; + //Guarantor Sex
	&quot;|&quot; + //Guarantor Type
	&quot;|&quot; + //Guarantor Relationship
	rel.ssn+&quot;|&quot; + //Guarantor SSN
	formatDate(begin)+&quot;|&quot; + //Guarantor Date - Begin
	&quot;|&quot; + //Guarantor Date - End
	&quot;1|&quot; + //Guarantor Priority
	&quot;|&quot; + //Guarantor Employer Name
	&quot;|&quot; + //Guarantor Employer Address
	&quot;|&quot; + //Guarantor Employ Phone Number
	randomInt(6)+&quot;|&quot; + //Guarantor Employee ID Number
	rel.jobStatus+&quot;|&quot; + //Guarantor Employment Status
	&quot;|&quot; + //Guarantor Organization
	YN()+&quot;|&quot; + //Guarantor Billing Hold Flag
	&quot;|&quot; + //Guarantor Credit Rating Code
	&quot;|&quot; + //Guarantor Death Date And Time
	&quot;N|&quot; + //Guarantor Death Flag
	&quot;|&quot; + //Guarantor Charge Adjustment Code
	&quot;|&quot; + //Guarantor Household Annual Income
	&quot;|&quot; + //Guarantor Household Size
	randomInt(10)+&quot;|&quot; + //Guarantor Employer ID Number
	rel.married+&quot;|&quot; + //Guarantor Marital Status Code
	&quot;|&quot; + //Guarantor Hire Effective Date
	&quot;|&quot; + //Employment Stop Date
	&quot;|&quot; + //Living Dependency
	&quot;|&quot; + //Ambulatory Status
	&quot;|&quot; + //Citizenship
	rel.language+&quot;|&quot; + //Primary Language
	valFromList([&quot;R&quot;,&quot;U&quot;,&quot;A&quot;,&quot;F&quot;,&quot;I&quot;])+&quot;|&quot; + //Living Arrangement
	&quot;|&quot; + //Publicity Indicator
	rel.protection+&quot;|&quot; + //Protection Indicator
	rel.student+&quot;|&quot; + //Student Indicator
	rel.religion+&quot;|&quot; + //Religion
	rel.name.mothersMaiden+&quot;|&quot; + //Mother s Maiden Name
	&quot;USA|&quot; + //Nationality Code
	rel.ethnicity+&quot;|&quot; + //Ethnic Group
	&quot;|&quot; + //Contact Person&apos;s Name
	&quot;|&quot; + //Contact Person s Telephone Number
	&quot;|&quot; + //Contact Reason
	&quot;|&quot; + //Contact Relationship Code
	rel.jobTitle+&quot;|&quot; + //Job Title
	&quot;|&quot; + //Job Code/Class
	&quot;|&quot; + //Guarantor Employer&apos;s Organization Name
	&quot;|&quot; + //Handicap
	rel.jobStatus+&quot;|&quot; + //Job Status
	&quot;|&quot; + //Guarantor Financial Class
	rel.race+&quot;|\n&quot;; //Guarantor Race
	return gt1.toUpperCase();
}
function NTE(setId){
	var nte = &quot;NTE|&quot; +
			setId+&quot;|&quot; +
			&quot;TX|&quot; +
			valFromList([
				&quot;Some notes about the patient go here.&quot;,
				&quot;This one seems kind of sick. Maybe we should check them out? &quot;,
				&quot;The patient can&apos;t see what I typed in the chart&quot;,
				&quot;The patient can&apos;t see what I typed in the chart&quot;,
				&quot;I liked the old paper charts better&quot;
			])+&quot;\n&quot;;
	return nte;
}
function IN1(ins){
	
	var in1 = &quot;IN1|&quot; +
	&quot;1|&quot; + //Set ID - Insurance
	ins.planId+&quot;|&quot; + //Insurance Plan ID
	ins.company.id+&quot;|&quot; + //Insurance Company ID
	ins.company.name+&quot;|&quot; + //Insurance Company Name
	ins.company.address.street + &quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+ins.company.address.state+&quot;^&quot;+ins.company.address.zip+&quot;|&quot; + //Insurance Company Address
	ins.company.contactPerson+&quot;|&quot; + //Insurance Co. Contact Ppers
	ins.company.contactPhone+&quot;|&quot; + //Insurance Co Phone Number
	ins.groupNumber+&quot;|&quot; + //Group Number
	ins.groupName+&quot;|&quot; + //Group Name
	ins.groupEmpId+&quot;|&quot; + //Insured&apos;s group employer ID
	ins.groupEmployer+&quot;|&quot; + //Insured&apos;s Group Emp Name
	formatDate(ins.effectiveDate)+&quot;|&quot; + //Plan Effective Date
	valFromList([formatDate(ins.expirationDate),&quot;&quot;])+&quot;|&quot; + //Plan Expiration Date
	ins.authorizationInfo+&quot;|&quot; + //Authorization Information
	ins.planType+&quot;|&quot; + //Plan Type
	ins.insured.name.last + &quot;^&quot; + ins.insured.name.first+&quot;^&quot;+ins.insured.name.initial+&quot;|&quot; + //Name of Insured
	&quot;SELF|&quot; + //Insured&apos;s Relationship to Patient
	ins.insured.dob+&quot;|&quot; + //Insured&apos;s Date of Birth
	ins.insured.address.street + &quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+ins.insured.address.state+&quot;^&quot;+ins.insured.address.zip+&quot;|&quot; + //Insured&apos;s Address
	valFromList([&quot;Y&quot;,&quot;N&quot;,&quot;M&quot;])+&quot;|&quot; + //Assignment of Benefits
	valFromList([&quot;CO&quot;,&quot;IN&quot;])+&quot;|&quot; + //Coordination of Benefits
	&quot;1|&quot; + //Coord of Ben. Priority
	&quot;N|&quot; + //Notice of Admission Code
	&quot;|&quot; + //Notice of Admission Date
	&quot;N|&quot; + //Rpt of Eigibility Code
	&quot;|&quot; + //Rpt of Eligibility Date
	YN()+&quot;|&quot; + //Release Information Code
	&quot;|&quot; + //Pre-Admit Cert
	formatDate(randomDate(2016,2017))+&quot;|&quot; + //Verification Date/Time
	&quot;|&quot; + //Verification By
	valFromList([&quot;S&quot;,&quot;U&quot;])+&quot;|&quot; + //Type of Agreement Code
	&quot;|&quot; + //Billing Status
	&quot;|&quot; + //Lifetime Reserve Days
	&quot;|&quot; + //Delay before lifetime reserve days
	&quot;|&quot; + //Company Plan Code
	ins.policyNumber+&quot;|&quot; + //Policy Number
	ins.deductible+&quot;|&quot; + //Policy Deductible
	&quot;|&quot; + //Policy Limit - Amount
	&quot;|&quot; + //Policy Limit - Days
	&quot;|&quot; + //Room Rate - Semi-Private
	&quot;|&quot; + //Room Rate - Private
	ins.insured.jobStatus+&quot;|&quot; + //Insured&apos;s Employment Status
	ins.insured.sex+&quot;|&quot; + //Insured&apos;s Sex
	ins.insured.employer.address.street + &quot;^^&quot;+&quot;MADISON&quot;+&quot;^&quot;+ins.insured.employer.address.state+&quot;^&quot;+ins.insured.employer.address.zip+&quot;|&quot; + //Insured&apos;s Employer Address
	&quot;|&quot; + //Verification Status
	ins.priorPlanId+&quot;|&quot; + //Prior Insurance Plan ID
	ins.coverageType+&quot;|&quot; + //Coverage Type
	&quot;|&quot; + //Handicap
	ins.insured.id.external+&quot;|\n&quot;;  //Insured&apos;s ID Number
	return in1.toUpperCase();
	
}
function IN2(ins){ 
	var in2 = &quot;IN2|&quot;+
	ins.insured.employeeId+&quot;|&quot; + //Insured&apos;s Employee ID
	ins.insured.ssn+&quot;|&quot; + //Insured&apos;s Social Security Number
	ins.insured.employer.name+&quot;|&quot; + //Insured&apos;s Employer Name
	&quot;|&quot; + //Employer Information Data
	valFromList([&quot;E&quot;,&quot;G&quot;,&quot;I&quot;,&quot;O&quot;,&quot;P&quot;])+&quot;|&quot; + //Mail Claim Party
	&quot;|&quot; + //Medicare Health Ins Card Number
	&quot;|&quot; + //Medicaid Case Name
	&quot;|&quot; + //Medicaid Case Number
	&quot;|&quot; + //Champus Sponsor Name
	&quot;|&quot; + //Champus ID Number
	&quot;|&quot; + //Dependent of Champus Recipient
	&quot;|&quot; + //Champus Organization
	&quot;|&quot; + //Champus Station
	&quot;|&quot; + //Champus Service
	&quot;|&quot; + //Champus Rank/Grade
	&quot;|&quot; + //Champus Status
	&quot;|&quot; + //Champus Retire Date
	&quot;|&quot; + //Champus Non-Avail Cert on File
	&quot;N|&quot; + //Baby Coverage
	&quot;N|&quot; + //Combine Baby Bill
	&quot;|&quot; + //Blood Deductible
	&quot;|&quot; + //Special Coverage Approval Name
	&quot;|&quot; + //Special Coverage Approval Title
	&quot;|&quot; + //Non-Covered Insurance Code
	ins.company.id+&quot;|&quot; + //Payor ID
	ins.policyNumber+&quot;|&quot; + //Payor Subscriber ID
	&quot;1|&quot; + //Eligibility Source
	&quot;|&quot; + //Room Coverage Type/Amount
	&quot;|&quot; + //Policy Type/Amount
	randomInt(1)%5+&quot;^&quot;+ins.deductible+&quot;^&quot;+randomInt(2)+&quot;|&quot; + //Daily Deductible
	&quot;U|&quot; + //Living Dependency
	ins.insured.ambulatoryStatus+&quot;|&quot; + //Ambulatory Status
	ins.insured.citizenship+&quot;|&quot; + //Citizenship
	ins.insured.language+&quot;|&quot; + //Primary Language
	ins.insured.livingArrangement+&quot;|&quot; + //Living Arrangement
	ins.insured.publicity+&quot;|&quot; + //Publicity Indicator
	ins.insured.protection+&quot;|&quot; + //Protection Indicator
	ins.insured.student+&quot;|&quot; + //Student Indicator
	ins.insured.religion+&quot;|&quot; + //Religion
	ins.insured.name.mothersMaiden+&quot;|&quot; + //Mother s Maiden Name
	&quot;USA|&quot; + //Nationality Code
	ins.insured.ethnicity+&quot;|&quot; + //Ethnic Group
	ins.insured.married+&quot;|&quot; + //Marital Status
	formatDate(ins.insured.employer.startDate)+&quot;|&quot; + //Employment Start Date
	&quot;|&quot; + //Employment Stop Date
	ins.insured.jobTitle+&quot;|&quot; + //Job Title
	&quot;|&quot; + //Job Code/Class
	ins.insured.jobStatus+&quot;|&quot; + //Job Status
	&quot;|&quot; + //Employer Contact Person Name
	&quot;|&quot; + //Employer Contact Person Phone Number
	&quot;|&quot; + //Employer Contact Reason
	&quot;|&quot; + //Insured s Contact Person s Name
	&quot;|&quot; + //Insured s Contact Person Telephone Number
	&quot;|&quot; + //Insured s Contact Person Reason
	&quot;|&quot; + //Relationship To The Patient Start Date
	&quot;|&quot; + //Relationship To The Patient Stop Date
	&quot;|&quot; + //Insurance Co. Contact Reason
	&quot;|&quot; + //Insurance Co. Contact Phone Number
	&quot;|&quot; + //Policy Scope
	&quot;|&quot; + //Policy Source
	ins.policyNumber+&quot;|&quot; + //Patient Member Number
	&quot;SEL|&quot; + //Guarantor s Relationship To Insured
	ins.insured.phone.home+&quot;|&quot; + //Insured s Telephone Number - Home
	ins.insured.phone.work+&quot;|&quot; + //Insured s Employer Telephone Number
	&quot;|&quot; + //Military Handicapped Program
	YN()+&quot;|&quot; + //Suspend Flag
	YN()+&quot;|&quot; + //Co-pay Limit Flag
	YN()+&quot;|&quot; + //Stoploss Limit Flag
	&quot;|&quot; + //Insured Organization Name And ID
	&quot;|&quot; + //Insured Employer Organization Name And ID
	ins.insured.race+&quot;|&quot; + //Race
	&quot;SEL|\n&quot; ; //Patient Relationship to Insured
	return in2.toUpperCase();
}
function IN3(ins){
	var in3 = &quot;IN3|&quot; +
	&quot;1|&quot; + //Set ID - Insurance Certification
	ins.cert.certNumber+&quot;|&quot; + //Certification Number
	ins.cert.certBy+&quot;|&quot; + //Certified By
	ins.cert.required+&quot;|&quot; + //Certification Required
	ins.cert.penalty+&quot;|&quot; + //Penalty
	formatDate(ins.cert.certDate)+&quot;|&quot; + //Certification Date/Time
	&quot;|&quot; + //Certification Modify Date/Time
	formatProvider(ins.cert.provider)+&quot;|&quot; + //Operator
	formatDate(ins.cert.certDate)+&quot;|&quot; + //Certification Begin Date
	&quot;|&quot; + //Certification End Date
	valFromList([&quot;AP&quot;,&quot;PE&quot;])+&quot;^&quot;+randomInt(1)+&quot;|&quot; + //Days
	&quot;|&quot; + //Non-Concur Code/Description
	&quot;|&quot; + //Non-Concur Effective Date/Time
	formatProvider(new provider())+&quot;|&quot; + //Physician Reviewer
	formatProvider(ins.cert.provider)+&quot;|&quot; + //Certification Contact
	ins.cert.provider.phone.work+&quot;|&quot; + //Certification Contact Phone Number
	&quot;|&quot; + //Appeal Reason
	&quot;DATICA CERTIFICATION GROUP|&quot; + //Certification Agency
	phoneNumber()+&quot;|&quot; + //Certification Agency Phone Number
	&quot;IPE|&quot; + //Pre-Certification required/Window = inpatient elective
	formatProvider(new provider())+&quot;|&quot; + //Case Manager
	&quot;|&quot; + //Second Opinion Date
	&quot;|&quot; + //Second Opinion Status
	&quot;|&quot; + //Second Opinion Documentation Received
	formatProvider(new provider())+&quot;|\n&quot;; //Second Opinion Physician
	return in3.toUpperCase();
}
function ACC(){
	var acc = &quot;ACC|&quot; + 
	formatDate(randomDate(2016,2016))+&quot;|&quot; + //accident date time
	&quot;V89.2^Person injured in unspecified motor-vehicle accident, traffic^ICD-10|&quot; + //accident code
	&quot;HWY &quot;+randomLetter()+randomInt(2)+&quot;|&quot; + //accident location
	usState()+&quot;|&quot; + //auto accident state
	YN()+&quot;|&quot; + //accident job related indicator
	&quot;N|\n&quot;; //accident death indicator
	return acc.toUpperCase();
}
//in progress ********************

function medication(){
	function giveDetails(){}
		//quantity-timing:
		//quantity^interval^duration^start date/time^end date/time^priority^condition^text
		//create template and then fill out values
		var base = {
				&quot;id&quot;:&quot;00338004902&quot;,
				&quot;name&quot;:&quot;SODIUM CHLORIDE .9%&quot;,
				&quot;unit&quot;:&quot;ML&quot;,
				&quot;form&quot;: &quot;IV&quot;,
		};
		var med = {
				&quot;id&quot;:&quot;687886963&quot;,
				&quot;name&quot;:&quot;SERTRALINE HYDROCHLORIDE&quot;,
				&quot;units&quot;:&quot;MG&quot;,
				&quot;dosageForm&quot;:&quot;TAB&quot;,
				&quot;pharmacyInstructions&quot;:&quot;&quot;,
				&quot;providerInstructions&quot;:&quot;Take 1 tablet by mouth daily&quot;,
				&quot;quantityTiming&quot;:&quot;1&amp;Q1D&quot;,
				&quot;interval&quot;:&quot;DAILY&quot;,
				&quot;strength&quot;:&quot;25&quot;,
				&quot;dispenseAmount&quot;:&quot;30&quot;,
				&quot;indication&quot;:&quot;F32.1^Major depressive disorder, single episode, moderate^ICD-10&quot;,
				&quot;min&quot;:&quot;1&quot;,
				&quot;max&quot;:&quot;&quot; //not used nonvarying dose
		};//med.id+&quot;^&quot;+med.name+&quot;^NDC&quot;

	return med;
}

function RXO(med){
	var rxo = &quot;RXO|&quot; +
	med.id+&quot;^&quot;+med.name+&quot;^NDC&quot;+&quot;|&quot; + //Requested Give Code
	med.min+&quot;|&quot; + //Requested Give Amount - Minimum
	&quot;|&quot; + //Requested Give Amount - Maximum - not used
	med.units+&quot;|&quot; + //Requested Give Units
	med.dosageForm+&quot;|&quot; + //Requested Dosage Form
	&quot;|&quot; + //Provider&apos;s Pharmacy Instructions
	med.providerInstructions+&quot;|&quot; + //Provider&apos;s Administration Instructions
	hospital()+&quot;|&quot; + //Deliver To Location
	valFromList([&quot;N&quot;,&quot;G&quot;,&quot;T&quot;])+&quot;|&quot; + //Allow Substitutions
	&quot;|&quot; + //Requested Dispense Code
	med.dispenseAmount+&quot;|&quot; + //Requested Dispense Amount
	&quot;|&quot; + //Requested Dispense Units
	&quot;|&quot; + //Number of Refills
	&quot;|&quot; + //Ordering Provider&apos;s DEA Number
	&quot;|&quot; + //Pharmacist/Treatment Supplier&apos;s Verifier ID
	YN()+&quot;|&quot; + //Needs Human Review
	&quot;D1|&quot; + //Requested Give Per
	med.strength+&quot;|&quot; + //Requested Give Strength
	med.units+&quot;|&quot; + //Requested Give Strength Units
	med.indication+&quot;|&quot; + //Indication
	&quot;|&quot; + //Requested Give Rate Amount
	&quot;|\n&quot;;//Requested Give Rate Units
	return rxo.toUpperCase();
}
function RXR(){
	var rxr = &quot;RXR|&quot; +
			&quot;|&quot; + //route
			&quot;|&quot; + //site
			&quot;|&quot; + //administration device
			&quot;|\n&quot;; //administration route
	return rxr.toUpperCase();
}
function RXC(){
	var rxc = &quot;RXC|&quot; + 
	&quot;|&quot; + //rx component type
	&quot;|&quot; + //component code
	&quot;|&quot; + //component amount
	&quot;|&quot; + //component units
	&quot;|&quot; + //component strength
	&quot;|\n&quot;; //component strength units
}
function RXE(med){
	var rxe = &quot;RXE|&quot; +
	med.quantityTiming+&quot;|&quot; + // Quantity/Timing
	med.id+&quot;^&quot;+med.name+&quot;^NDC&quot;+&quot;|&quot; + // Give Code
	med.min+&quot;|&quot; + // Give Amount - Minimum
	&quot;|&quot; + // Give Amount - Maximum
	med.units+&quot;|&quot; + // Give Units
	med.dosageForm+&quot;|&quot; + // Give Dosage Form
	med.providerInstructions+&quot;|&quot; + // Provider&apos;s Administration Instructions
	&quot;|&quot; + // Deliver To Location
	valFromList([&quot;N&quot;,&quot;G&quot;,&quot;T&quot;,&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;])+&quot;|&quot; + // Substitution Status
	med.dispenseAmount+&quot;|&quot; + // Dispense Amount
	med.units+&quot;|&quot; + // Dispense Units
	randomInt(1)%3+&quot;|&quot; + // Number of Refills
	&quot;|&quot; + // Ordering Provider&apos;s DEA Number
	&quot;|&quot; + // Pharmacist/Treatment Supplier&apos;s Verifier ID
	&quot;|&quot; + // Prescription Number
	&quot;|&quot; + // Number of Refills Remaining
	&quot;|&quot; + // Number of Refills/Doses Dispensed
	&quot;|&quot; + // Date / time of most recent refill or dose dispensed
	&quot;|&quot; + // Total Daily Dose
	YN()+&quot;|&quot; + // Needs Human Review
	&quot;|&quot; + // Pharmacy/Treatment Supplier&apos;s Special Dispensing Instructions
	&quot;|&quot; + // Give Per
	&quot;|&quot; + // Give Rate Amount
	&quot;|&quot; + // Give Rate Units
	&quot;|&quot; + // Give Strength
	&quot;|&quot; + // Give Strength Units
	&quot;|&quot; + // Give Indication
	&quot;|&quot; + // Dispense Package Size
	&quot;|&quot; + // Dispense Package Size Unit
	&quot;|\n&quot;; // Dispense Package Method
	return rxe.toUpperCase();
}

//to do ********************

function CTI(){}
function UB1(){}
function UB2(){}




//================================================================================
//Helper functions
//================================================================================
function person(sex){
	if (sex == null){
		sex = gender();
	}
	var intDob = randomDate(1910,1970);
	var dob = formatDate(intDob);
	var person = {
			&quot;id&quot;:{
				&quot;internal&quot;:randomInt(8),
				&quot;external&quot;:randomInt(8),
				&quot;alternate&quot;:randomInt(8)
			},
			&quot;account&quot;:randomInt(6),
			&quot;ssn&quot;:900000000+randomInt(8),
			&quot;driversLicense&quot;:&quot;S&quot;+randomInt(15),
			&quot;name&quot;:{
				&quot;last&quot;:lastName(),
				&quot;first&quot;:&quot;&quot;,
				&quot;initial&quot;:randomLetter(),
				&quot;alias&quot;:alias(),
				&quot;mothersMaiden&quot;:lastName()
			},
			&quot;sex&quot;:sex,
			&quot;address&quot;:{
				&quot;street&quot;:street(),
				&quot;state&quot;:usState(),
				&quot;zip&quot;:zipCode()
			},
			&quot;intDob&quot;:intDob,
			&quot;dob&quot;:dob,
			&quot;race&quot;:race(),
			&quot;phone&quot;:{
				&quot;home&quot;:phoneNumber(),
				&quot;work&quot;:phoneNumber()
			},
			&quot;language&quot;:language(),
			&quot;married&quot;:maritalStatus(),
			&quot;religion&quot;:religion(),
			&quot;ethnicity&quot;:ethnicity(),
			&quot;multipleBirth&quot;:YN(),
			&quot;birthPlace&quot;:&quot;MADISON^&quot;+usState(),
			&quot;birthOrder&quot;:randomInt(1)%5+1,
			&quot;citizenship&quot;:&quot;US&quot;,
			&quot;pcp&quot;:&quot;&quot;,//formatProvider(provider()),
			&quot;student&quot;:valFromList(&quot;F&quot;,&quot;N&quot;,&quot;P&quot;,&quot;&quot;),
			&quot;dependent&quot;:valFromList([&quot;M&quot;,&quot;O&quot;,&quot;U&quot;,&quot;W&quot;]),
			&quot;livingArrangement&quot;:valFromList([&quot;A&quot;,&quot;F&quot;,&quot;I&quot;,&quot;R&quot;,&quot;U&quot;]),
			&quot;livingWill&quot;:valFromList([&quot;Y&quot;,&quot;F&quot;,&quot;N&quot;,&quot;I&quot;,&quot;U&quot;]),
			&quot;organDonor&quot;:valFromList([&quot;Y&quot;,&quot;F&quot;,&quot;I&quot;]),
			&quot;separateBill&quot;:YN(),
			&quot;publicity&quot;:valFromList([&quot;F&quot;,&quot;N&quot;,&quot;U&quot;,&quot;O&quot;]),
			&quot;protection&quot;:YN(),
			&quot;ambulatoryStatus&quot;:valFromList([&quot;A0&quot;,&quot;A1&quot;,&quot;A2&quot;,&quot;A3&quot;,&quot;A4&quot;,&quot;A5&quot;,&quot;A6&quot;,&quot;A7&quot;,&quot;A8&quot;,&quot;A9&quot;,&quot;B1&quot;,&quot;B2&quot;,&quot;B3&quot;,&quot;B4&quot;,&quot;B5&quot;,&quot;B6&quot;]),
			&quot;jobStatus&quot;:valFromList([&quot;O&quot;,&quot;P&quot;,&quot;T&quot;,&quot;U&quot;]),
			&quot;jobTitle&quot;:valFromList([&quot;Teacher&quot;,&quot;Painter&quot;,&quot;Software developer&quot;,&quot;Farmer&quot;,&quot;CEO&quot;,&quot;Chef&quot;]),
			&quot;employeeId&quot;:randomInt(7),
			&quot;employer&quot;:{
				&quot;name&quot;:valFromList([&quot;ACME GROUP&quot;,&quot;VANDELAY INDUSTRIES&quot;,&quot;THE HUMAN FUND&quot;]),
				&quot;address&quot;:{
					&quot;street&quot;:street(),
					&quot;state&quot;:usState(),
					&quot;zip&quot;:zipCode()
				},
				&quot;startDate&quot;:randomDate(2015,2016)
			}
	};
	switch (person.sex){
	case &quot;M&quot;: person.name.first  = maleName();
	break;
	case &quot;F&quot;: person.name.first = femaleName();
	}
	return person;
}
function insurance(insured){
	var effDate = randomDate(2016,2017);
	var termDate = adjustYear(effDate,3,3);
	var prov = provider();
	var certDate = adjustDate(effDate,10,20);
	var ins = {
			&quot;planId&quot;:randomLetter()+randomInt(8),
			&quot;company&quot;:{
				&quot;id&quot;: randomInt(8),
				&quot;name&quot;:&quot;DATICA INSURANCE CO&quot;,
				&quot;address&quot;:{
					&quot;street&quot;:street(),
					&quot;state&quot;:usState(),
					&quot;zip&quot;:zipCode()
				},
				&quot;contactPerson&quot;:&quot;&quot;,
				&quot;contactPhone&quot;:phoneNumber()
					},
			&quot;groupNumber&quot;:randomInt(6),
			&quot;groupName&quot;:&quot;INSURANCE GROUP &quot;+randomLetter(),
			&quot;groupEmpId&quot;:randomInt(9),
			&quot;groupEmployer&quot;:insured.employer.name,
			&quot;effectiveDate&quot;:effDate,
			&quot;expirationDate&quot;:termDate,
			&quot;authorizationInfo&quot;:&quot;A&quot;+randomInt(11),
			&quot;planType&quot;:valFromList([&quot;HMO&quot;,&quot;PPO&quot;,&quot;EPO&quot;,&quot;HDHP&quot;,&quot;MCD&quot;]),
			&quot;insured&quot;:insured,
			&quot;policyNumber&quot;:randomLetter()+randomInt(9),
			&quot;priorPlanId&quot;:randomLetter()+randomInt(8),
			&quot;coverageType&quot;:valFromList([&quot;H&quot;,&quot;P&quot;,&quot;B&quot;]),
			&quot;deductible&quot;:valFromList([&quot;0&quot;,&quot;500&quot;,&quot;1000&quot;,&quot;2500&quot;]),
			&quot;cert&quot;:{
				&quot;certNumber&quot;:randomInt(12),
				&quot;required&quot;:YN(),
				&quot;provider&quot;:prov,
				&quot;penalty&quot;:valFromList([&quot;AT&quot;,&quot;PC&quot;]),
				&quot;begins&quot;:certDate,
				&quot;certDate&quot;:certDate
				
			}
			}
	return ins;
}
function order(){ //could use better order services for orm
	var obsDate = randomDate(2016,2016);
	var prov = provider();
	var ord = {
			&quot;placerId&quot;:randomInt(9)+&quot;^DATICAORD&quot;,
			&quot;fillerId&quot;:randomInt(9)+&quot;^DATICAORD&quot;,
			&quot;universalServiceId&quot;:randomInt(6)+&quot;^GEN SCREENING&quot;,
			&quot;observationBegin&quot;:obsDate,
			&quot;observationEnd&quot;:obsDate,
			&quot;provider&quot;:prov
	};
	return ord;
}
function provider(){
	var prov = person();
	
	prov.credential = valFromList([&quot;MD&quot;,&quot;RN&quot;,&quot;PA&quot;,&quot;CRNA&quot;,&quot;NP&quot;])
	return prov;
	//return randomInt(5)+&quot;^&quot;+randomName()+&quot;^^^&quot;+valFromList([&quot;MD&quot;,&quot;RN&quot;,&quot;PA&quot;,&quot;CRNA&quot;,&quot;NP&quot;]);
}
function appointment(){
	var appointment = {
			&quot;placer&quot;:person(),
			&quot;filler&quot;:person(),
			&quot;placerId&quot;:randomInt(7),
			&quot;fillerId&quot;:randomInt(7),
			&quot;placerGroup&quot;:randomInt(7),
			&quot;reason&quot;:valFromList([&quot;CHECKUP&quot;,&quot;EMERGENCY&quot;,&quot;FOLLOWUP&quot;,&quot;ROUTINE&quot;,&quot;WALKIN&quot;]),
			&quot;type&quot;:valFromList([&quot;COMPLETE&quot;,&quot;NORMAL&quot;,&quot;TENTATIVE&quot;]),
			&quot;duration&quot;:((randomInt(1)%4)*15),
			&quot;fillerStatusCode&quot;:valFromList([&quot;PENDING&quot;,&quot;WAITLIST&quot;,&quot;BOOKED&quot;,&quot;STARTED&quot;,&quot;COMPLETE&quot;,&quot;CANCELLED&quot;,&quot;DC&quot;,&quot;DELETED&quot;,&quot;BLOCKED&quot;,&quot;OVERBOOK&quot;]),
			&quot;date&quot;:randomDate(2017,2017)
	};
	return appointment;
}
function relative(pers){
	var sex = gender();
	var relationship = null;
	if (sex== &quot;M&quot;){
		relationship = valFromList([&quot;SPO&quot;,&quot;DOM&quot;,&quot;CHD&quot;,&quot;DEP&quot;,&quot;FTH&quot;,&quot;GRD&quot;,&quot;BRO&quot;,&quot;PAR&quot;,&quot;EMC&quot;,&quot;UNK&quot;,&quot;OTH&quot;]);
	} else if (sex ==&quot;F&quot;){
		relationship = valFromList([&quot;SPO&quot;,&quot;DOM&quot;,&quot;CHD&quot;,&quot;DEP&quot;,&quot;MTH&quot;,&quot;GRD&quot;,&quot;SIS&quot;,&quot;PAR&quot;,&quot;EMC&quot;,&quot;UNK&quot;,&quot;OTH&quot;]);
	}
	var relative= person(sex);
	if (relationship == &quot;CHD&quot;){
		relative.intDob = adjustYear(pers.intDob,18,40);
		relative.dob = formatDate(relative.intDob);
	}else if(relationship == &quot;FTH&quot; || relationship == &quot;MTH&quot; || relationship == &quot;PAR&quot;|| relationship == &quot;GRD&quot;){
		relative.intDob = adjustYear(pers.intDob,-18,-40);
		relative.dob = formatDate(relative.intDob);
	}else if (relationship == &quot;SPO&quot;){
		pers.married = &quot;Y&quot;;
		relative.married = &quot;Y&quot;;
	}
	relative.relationship = relationship;
	//mothers maiden name update
	return relative;}
function pathObs(ord){
	var observations = [
		{&quot;id&quot;:randomInt(6)+&quot;^TSH^L^11580-8^Thyrotropin^LN&quot;,&quot;value&quot;:&quot;2.66&quot;,&quot;units&quot;:&quot;uIU/mL&quot;,&quot;referenceRange&quot;:&quot;0.450-4.500&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^T4,Free(Direct)^L^3024-7^Thyroxine.free^LN&quot;,&quot;value&quot;:&quot;1.61&quot;,&quot;units&quot;:&quot;ng/dL&quot;,&quot;referenceRange&quot;:&quot;0.82-1.77&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^WBC^L^6690-2^Leukocytes^LN&quot;,&quot;value&quot;:&quot;4.1&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;3.4-10.8&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^RBC^L^789-8^Erythrocytes^LN&quot;,&quot;value&quot;:&quot;4.34&quot;,&quot;units&quot;:&quot;x10E6/uL&quot;,&quot;referenceRange&quot;:&quot;3.77-5.28&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Hemoglobin^L^718-7^Hemoglobin^LN&quot;,&quot;value&quot;:&quot;12.4&quot;,&quot;units&quot;:&quot;g/dL&quot;,&quot;referenceRange&quot;:&quot;11.1-15.9&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Hematocrit^L^4544-3^Hematocrit^LN&quot;,&quot;value&quot;:&quot;37.6&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;34.0-46.6&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^MCV^L^787-2^Erythrocyte mean corpuscular volume^LN&quot;,&quot;value&quot;:&quot;87&quot;,&quot;units&quot;:&quot;fL&quot;,&quot;referenceRange&quot;:&quot;79-97&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^MCH^L^785-6^Erythrocyte mean corpuscular hemoglobin^LN&quot;,&quot;value&quot;:&quot;28.6&quot;,&quot;units&quot;:&quot;pg&quot;,&quot;referenceRange&quot;:&quot;26.6-33.0&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^MCHC^L^786-4^Erythrocyte mean corpuscular hemoglobin concentrat^LN&quot;,&quot;value&quot;:&quot;33&quot;,&quot;units&quot;:&quot;g/dL&quot;,&quot;referenceRange&quot;:&quot;31.5-35.7&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^RDW^L^788-0^Erythrocyte distribution width^LN&quot;,&quot;value&quot;:&quot;13.8&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;12.3-15.4&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Platelets^L^777-3^Platelets^LN&quot;,&quot;value&quot;:&quot;228&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;150-379&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Neutrophils^L^770-8^Neutrophils/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;61&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Lymphs^L^736-9^Lymphocytes/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;28&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Monocytes^L^5905-5^Monocytes/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;9&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Eos^L^713-8^Eosinophils/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;2&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Basos^L^706-2^Basophils/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;0&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Neutrophils (Absolute)^L^751-8^Neutrophils^LN&quot;,&quot;value&quot;:&quot;2.5&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;1.4-7.0&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Lymphs (Absolute)^L^731-0^Lymphocytes^LN&quot;,&quot;value&quot;:&quot;1.1&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.7-3.1&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Monocytes(Absolute)^L^742-7^Monocytes^LN&quot;,&quot;value&quot;:&quot;0.4&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.1-0.9&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Eos (Absolute)^L^711-2^Eosinophils^LN&quot;,&quot;value&quot;:&quot;0.1&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.0-0.4&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Baso (Absolute)^L^704-7^Basophils^LN&quot;,&quot;value&quot;:&quot;0&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.0-0.2&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Immature Granulocytes^L^38518-7^Granulocytes.immature/100 leukocytes^LN&quot;,&quot;value&quot;:&quot;0&quot;,&quot;units&quot;:&quot;%&quot;,&quot;referenceRange&quot;:&quot;&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;},
		{&quot;id&quot;:randomInt(6)+&quot;^Immature Grans (Abs)^L^51584-1^Granulocytes.immature^LN&quot;,&quot;value&quot;:&quot;0&quot;,&quot;units&quot;:&quot;x10E3/uL&quot;,&quot;referenceRange&quot;:&quot;0.0-0.1&quot;,&quot;natureOfAbnormal&quot;:&quot;N&quot;,&quot;obsResultStatus&quot;:&quot;F&quot;}
	];
	var obs = valFromList(observations);
	if (ord !== null){obs.obsDate = ord.observationBegin;}
	else {obs.obsDate = randomDate(2016,2016);}
	return obs;
}
function diagnosis(){
	return valFromList([
		&quot;S82.9^Unspecified Fracture of Lower Leg^ICD-10&quot;,
		&quot;J96.91^Respiratory Failure, Unspecified with Hypoxia^ICD-10&quot;,
		&quot;I49.9^Cardiac Arrythmia, unspecified^ICD-10&quot;,
		&quot;S06.0^Concussion^ICD-10&quot;,
		&quot;E11.42^Type 2 Diabetes Mellitus with Diabetic polyneuropathy^ICD-10&quot;,
		&quot;S93.40^Sprain of unspecified ligament of ankle^ICD-10&quot;,
		&quot;G43.11^Migrane with aura,intractable^ICD-10&quot;,
		&quot;M25.531^Pain in right wrist^ICD-10&quot;,
		&quot;H54.2^Low vision, both eyes^ICD-10&quot;
	]);
}
function procedure(){ //CPT codes
	return valFromList([
		&quot;99213^Office Visit^CPT&quot;,
		&quot;36415^Venipuncture with blood draw^CPT&quot;,
		&quot;97813^Acupuncture without electric stimulation^CPT&quot;,
		&quot;71260^CT chest with contrast^CPT&quot;
	]);
}
//================================================================================
//basic functions
//================================================================================
function allowSubstitution(){
	return valFromList([&quot;NO&quot;,&quot;CONFIRM&quot;,&quot;NOTIFY&quot;,&quot;YES&quot;]);
}
function formatProvider(prov){
	return output =  prov.id.internal+&quot;^&quot;+prov.name.last+&quot;^&quot;+prov.name.first+&quot;^&quot;+prov.name.initial+&quot;^^&quot;+prov.credential
}
function hospital(){
	return &quot;DATICA HOSPITAL^^12345^^^DATICA HEALTHCARE&quot;;
}
function clinic(){
	return &quot;DATICA CLINIC^^23456^^^DATICA HEALTHCARE&quot;;
}
function today(){
	var date = new Date();
	return date.getFullYear()+pad(date.getMonth()+1,2)+pad((date.getDate()),2);
}
function YN(){
	return valFromList([&quot;Y&quot;,&quot;N&quot;]);
}
function randomName(){
	return lastName()+&quot;^&quot;+valFromList([maleName(),femaleName()])+&quot;^&quot;+randomLetter(); 
}
function randomLetter(){
	vals = [&quot;A&quot;,
		&quot;B&quot;,
		&quot;C&quot;,
		&quot;D&quot;,
		&quot;E&quot;,
		&quot;F&quot;,
		&quot;G&quot;,
		&quot;H&quot;,
		&quot;I&quot;,
		&quot;J&quot;,
		&quot;K&quot;,
		&quot;L&quot;,
		&quot;M&quot;,
		&quot;N&quot;,
		&quot;O&quot;,
		&quot;P&quot;,
		&quot;Q&quot;,
		&quot;R&quot;,
		&quot;S&quot;,
		&quot;T&quot;,
		&quot;U&quot;,
		&quot;V&quot;,
		&quot;W&quot;,
		&quot;X&quot;,
		&quot;Y&quot;,
		&quot;Z&quot;,
		&quot;&quot;];
	return valFromList(vals);
}
function ethnicity(){
	return valFromList([&quot;H&quot;,&quot;N&quot;,&quot;U&quot;]);
}
function religion(){
	return valFromList([&quot;ABC&quot;,
		&quot;AGN&quot;,
		&quot;AME&quot;,
		&quot;AMT&quot;,
		&quot;ANG&quot;,
		&quot;AOG&quot;,
		&quot;ATH&quot;,
		&quot;BAH&quot;,
		&quot;BAP&quot;,
		&quot;BMA&quot;,
		&quot;BOT&quot;,
		&quot;BRE&quot;,
		&quot;BTA&quot;,
		&quot;BTH&quot;,
		&quot;BUD&quot;,
		&quot;CAT&quot;,
		&quot;CFR&quot;,
		&quot;CHR&quot;,
		&quot;CHS&quot;,
		&quot;CMA&quot;,
		&quot;CNF&quot;,
		&quot;COC&quot;,
		&quot;COG&quot;,
		&quot;COI&quot;,
		&quot;COL&quot;,
		&quot;COM&quot;,
		&quot;COP&quot;,
		&quot;COT&quot;,
		&quot;CRR&quot;,
		&quot;DOC&quot;,
		&quot;EOT&quot;,
		&quot;EPI&quot;,
		&quot;ERL&quot;,
		&quot;EVC&quot;,
		&quot;FRQ&quot;,
		&quot;FUL&quot;,
		&quot;FWB&quot;,
		&quot;GRE&quot;,
		&quot;HIN&quot;,
		&quot;HOT&quot;,
		&quot;HSH&quot;,
		&quot;HVA&quot;,
		&quot;JAI&quot;,
		&quot;JCO&quot;,
		&quot;JEW&quot;,
		&quot;JOR&quot;,
		&quot;JOT&quot;,
		&quot;JRC&quot;,
		&quot;JRF&quot;,
		&quot;JRN&quot;,
		&quot;JWN&quot;,
		&quot;LMS&quot;,
		&quot;LUT&quot;,
		&quot;MEN&quot;,
		&quot;MET&quot;,
		&quot;MOM&quot;,
		&quot;MOS&quot;,
		&quot;MOT&quot;,
		&quot;MSH&quot;,
		&quot;MSU&quot;,
		&quot;NAM&quot;,
		&quot;NAZ&quot;,
		&quot;NOE&quot;,
		&quot;NRL&quot;,
		&quot;ORT&quot;,
		&quot;OTH&quot;,
		&quot;PEN&quot;,
		&quot;PRC&quot;,
		&quot;PRE&quot;,
		&quot;PRO&quot;,
		&quot;REC&quot;,
		&quot;REO&quot;,
		&quot;SAA&quot;,
		&quot;SEV&quot;,
		&quot;SHN&quot;,
		&quot;SIK&quot;,
		&quot;SOU&quot;,
		&quot;SPI&quot;,
		&quot;UCC&quot;,
		&quot;UMD&quot;,
		&quot;UNI&quot;,
		&quot;UNU&quot;,
		&quot;VAR&quot;,
		&quot;WES&quot;,
		&quot;WMC&quot;]);
}
function maritalStatus(){
	return valFromList([&quot;A&quot;,&quot;D&quot;,&quot;I&quot;,&quot;L&quot;,&quot;M&quot;,&quot;S&quot;,&quot;T&quot;,&quot;U&quot;,&quot;W&quot;,&quot;UNK&quot;]);
}
function language(){
	return valFromList([
		&quot;AR&quot;,
		&quot;ASE&quot;,
		&quot;BLU&quot;,
		&quot;BN&quot;,
		&quot;CJD&quot;,
		&quot;CS&quot;,
		&quot;DE&quot;,
		&quot;EL&quot;,
		&quot;EN&quot;,
		&quot;ES&quot;,
		&quot;FA&quot;,
		&quot;FR&quot;,
		&quot;HI&quot;,
		&quot;HR&quot;,
		&quot;HU&quot;,
		&quot;HY&quot;,
		&quot;ID&quot;,
		&quot;ILO&quot;,
		&quot;IT&quot;,
		&quot;JA&quot;,
		&quot;KM&quot;,
		&quot;KO&quot;,
		&quot;LO&quot;,
		&quot;NI&quot;,
		&quot;OTH&quot;,
		&quot;PL&quot;,
		&quot;PT&quot;,
		&quot;RO&quot;,
		&quot;RU&quot;,
		&quot;SK&quot;,
		&quot;SM&quot;,
		&quot;SO&quot;,
		&quot;SR&quot;,
		&quot;TH&quot;,
		&quot;TL&quot;,
		&quot;TO&quot;,
		&quot;UK&quot;,
		&quot;UR&quot;,
		&quot;VI&quot;,
		&quot;YI&quot;,
		&quot;YUH&quot;,
		&quot;ZH&quot;
	]);
	}
function race(){
	return valFromList([&quot;A&quot;,&quot;B&quot;,&quot;H&quot;,&quot;I&quot;,&quot;N&quot;,&quot;O&quot;,&quot;W&quot;,&quot;U&quot;]);
}
function zipCode(){
	return 90000 + randomInt(4);
}
function lastName(){
	var names = [
		&quot;Moore&quot;,
		&quot;Mcdonald&quot;,
		&quot;Pugh&quot;,
		&quot;Noble&quot;,
		&quot;Cross&quot;,
		&quot;Abbott&quot;,
		&quot;Morton&quot;,
		&quot;Wolfe&quot;,
		&quot;Ross&quot;,
		&quot;Harper&quot;,
		&quot;Patterson&quot;,
		&quot;Haney&quot;,
		&quot;Morris&quot;,
		&quot;Jenkins&quot;,
		&quot;Reese&quot;,
		&quot;Lynn&quot;,
		&quot;Mcintyre&quot;,
		&quot;Howard&quot;,
		&quot;Houston&quot;,
		&quot;Melendez&quot;,
		&quot;Sawyer&quot;,
		&quot;Stevenson&quot;,
		&quot;Frost&quot;,
		&quot;Wright&quot;,
		&quot;Ortega&quot;,
		&quot;West&quot;,
		&quot;Wilcox&quot;,
		&quot;Beltran&quot;,
		&quot;Flowers&quot;,
		&quot;Randolph&quot;,
		&quot;Larson&quot;,
		&quot;Ruiz&quot;,
		&quot;Sherman&quot;,
		&quot;Welch&quot;,
		&quot;Mclaughlin&quot;,
		&quot;Small&quot;,
		&quot;Montes&quot;,
		&quot;Cantrell&quot;,
		&quot;Watts&quot;,
		&quot;Schaefer&quot;,
		&quot;Glover&quot;,
		&quot;Boyle&quot;,
		&quot;Hays&quot;,
		&quot;Mueller&quot;,
		&quot;Mcguire&quot;,
		&quot;Hatfield&quot;,
		&quot;Bryant&quot;,
		&quot;Carney&quot;,
		&quot;Baird&quot;,
		&quot;Phelps&quot;
	];
	var lastName = valFromList(names);
	return lastName;
}
function maleName(){
	var names = [&quot;James&quot;,
		&quot;John&quot;,
		&quot;Robert&quot;,
		&quot;Michael&quot;,
		&quot;William&quot;,
		&quot;David&quot;,
		&quot;Richard&quot;,
		&quot;Joseph&quot;,
		&quot;Thomas&quot;,
		&quot;Charles&quot;,
		&quot;Christopher&quot;,
		&quot;Daniel&quot;,
		&quot;Matthew&quot;,
		&quot;Anthony&quot;,
		&quot;Donald&quot;,
		&quot;Mark&quot;,
		&quot;Paul&quot;,
		&quot;Steven&quot;,
		&quot;Andrew&quot;,
		&quot;Kenneth&quot;,
		&quot;George&quot;,
		&quot;Joshua&quot;,
		&quot;Kevin&quot;,
		&quot;Brian&quot;,
		&quot;Edward&quot;,
		&quot;Ronald&quot;,
		&quot;Timothy&quot;,
		&quot;Jason&quot;,
		&quot;Jeffrey&quot;,
		&quot;Ryan&quot;,
		&quot;Gary&quot;,
		&quot;Jacob&quot;,
		&quot;Nicholas&quot;,
		&quot;Eric&quot;,
		&quot;Stephen&quot;,
		&quot;Jonathan&quot;,
		&quot;Larry&quot;,
		&quot;Justin&quot;,
		&quot;Scott&quot;,
		&quot;Frank&quot;,
		&quot;Brandon&quot;,
		&quot;Raymond&quot;,
		&quot;Gregory&quot;,
		&quot;Benjamin&quot;,
		&quot;Samuel&quot;,
		&quot;Patrick&quot;,
		&quot;Alexander&quot;,
		&quot;Jack&quot;,
		&quot;Dennis&quot;,
		&quot;Jerry&quot;,
		&quot;Tyler&quot;,
		&quot;Aaron&quot;,
		&quot;Henry&quot;,
		&quot;Douglas&quot;,
		&quot;Jose&quot;,
		&quot;Peter&quot;,
		&quot;Adam&quot;,
		&quot;Zachary&quot;,
		&quot;Nathan&quot;,
		&quot;Walter&quot;,
		&quot;Harold&quot;,
		&quot;Kyle&quot;,
		&quot;Carl&quot;,
		&quot;Arthur&quot;,
		&quot;Gerald&quot;,
		&quot;Roger&quot;,
		&quot;Keith&quot;,
		&quot;Jeremy&quot;,
		&quot;Terry&quot;,
		&quot;Lawrence&quot;,
		&quot;Sean&quot;,
		&quot;Christian&quot;,
		&quot;Albert&quot;,
		&quot;Joe&quot;,
		&quot;Ethan&quot;,
		&quot;Austin&quot;,
		&quot;Jesse&quot;,
		&quot;Willie&quot;,
		&quot;Billy&quot;,
		&quot;Bryan&quot;,
		&quot;Bruce&quot;,
		&quot;Jordan&quot;,
		&quot;Ralph&quot;,
		&quot;Roy&quot;,
		&quot;Noah&quot;,
		&quot;Dylan&quot;,
		&quot;Eugene&quot;,
		&quot;Wayne&quot;,
		&quot;Alan&quot;,
		&quot;Juan&quot;,
		&quot;Louis&quot;,
		&quot;Russell&quot;,
		&quot;Gabriel&quot;,
		&quot;Randy&quot;,
		&quot;Philip&quot;,
		&quot;Harry&quot;,
		&quot;Vincent&quot;,
		&quot;Bobby&quot;,
		&quot;Johnny&quot;,
		&quot;Logan&quot;];
	var firstName = valFromList(names);
	return firstName;
}
function femaleName(){
	var names = [&quot;Mary&quot;,
		&quot;Patricia&quot;,
		&quot;Jennifer&quot;,
		&quot;Elizabeth&quot;,
		&quot;Linda&quot;,
		&quot;Barbara&quot;,
		&quot;Susan&quot;,
		&quot;Jessica&quot;,
		&quot;Margaret&quot;,
		&quot;Sarah&quot;,
		&quot;Karen&quot;,
		&quot;Nancy&quot;,
		&quot;Betty&quot;,
		&quot;Lisa&quot;,
		&quot;Dorothy&quot;,
		&quot;Sandra&quot;,
		&quot;Ashley&quot;,
		&quot;Kimberly&quot;,
		&quot;Donna&quot;,
		&quot;Carol&quot;,
		&quot;Michelle&quot;,
		&quot;Emily&quot;,
		&quot;Amanda&quot;,
		&quot;Helen&quot;,
		&quot;Melissa&quot;,
		&quot;Deborah&quot;,
		&quot;Stephanie&quot;,
		&quot;Laura&quot;,
		&quot;Rebecca&quot;,
		&quot;Sharon&quot;,
		&quot;Cynthia&quot;,
		&quot;Kathleen&quot;,
		&quot;Amy&quot;,
		&quot;Shirley&quot;,
		&quot;Anna&quot;,
		&quot;Angela&quot;,
		&quot;Ruth&quot;,
		&quot;Brenda&quot;,
		&quot;Pamela&quot;,
		&quot;Nicole&quot;,
		&quot;Katherine&quot;,
		&quot;Virginia&quot;,
		&quot;Catherine&quot;,
		&quot;Christine&quot;,
		&quot;Samantha&quot;,
		&quot;Debra&quot;,
		&quot;Janet&quot;,
		&quot;Rachel&quot;,
		&quot;Carolyn&quot;,
		&quot;Emma&quot;,
		&quot;Maria&quot;,
		&quot;Heather&quot;,
		&quot;Diane&quot;,
		&quot;Julie&quot;,
		&quot;Joyce&quot;,
		&quot;Evelyn&quot;,
		&quot;Frances&quot;,
		&quot;Joan&quot;,
		&quot;Christina&quot;,
		&quot;Kelly&quot;,
		&quot;Victoria&quot;,
		&quot;Lauren&quot;,
		&quot;Martha&quot;,
		&quot;Judith&quot;,
		&quot;Cheryl&quot;,
		&quot;Megan&quot;,
		&quot;Andrea&quot;,
		&quot;Ann&quot;,
		&quot;Alice&quot;,
		&quot;Jean&quot;,
		&quot;Doris&quot;,
		&quot;Jacqueline&quot;,
		&quot;Kathryn&quot;,
		&quot;Hannah&quot;,
		&quot;Olivia&quot;,
		&quot;Gloria&quot;,
		&quot;Marie&quot;,
		&quot;Teresa&quot;,
		&quot;Sara&quot;,
		&quot;Janice&quot;,
		&quot;Julia&quot;,
		&quot;Grace&quot;,
		&quot;Judy&quot;,
		&quot;Theresa&quot;,
		&quot;Rose&quot;,
		&quot;Beverly&quot;,
		&quot;Denise&quot;,
		&quot;Marilyn&quot;,
		&quot;Amber&quot;,
		&quot;Madison&quot;,
		&quot;Danielle&quot;,
		&quot;Brittany&quot;,
		&quot;Diana&quot;,
		&quot;Abigail&quot;,
		&quot;Jane&quot;,
		&quot;Natalie&quot;,
		&quot;Lori&quot;,
		&quot;Tiffany&quot;,
		&quot;Alexis&quot;,
		&quot;Kayla&quot;];
	var firstName = valFromList(names);
	return firstName;
}
function alias(){
	vals = [&quot;Skippy&quot;,
		&quot;Boomer&quot;,
		&quot;Buster&quot;,
		&quot;Froggy&quot;];
	var alias = valFromList(vals);
	return alias;
}
function gender(){
	vals = [&quot;M&quot;,&quot;F&quot;];
	var sex = valFromList(vals);
	return sex;
}
function randomInt(numDigits){
	var upper = Math.pow(10,numDigits);
	var random = Math.floor(Math.random()*upper);
	return random;
}
function usState(){
	var vals = [&quot;AL&quot;,
		&quot;AK&quot;,
		&quot;AZ&quot;,
		&quot;AR&quot;,
		&quot;CA&quot;,
		&quot;CO&quot;,
		&quot;CT&quot;,
		&quot;DE&quot;,
		&quot;FL&quot;,
		&quot;GA&quot;,
		&quot;HI&quot;,
		&quot;ID&quot;,
		&quot;IL&quot;,
		&quot;IN&quot;,
		&quot;IA&quot;,
		&quot;KS&quot;,
		&quot;KY&quot;,
		&quot;LA&quot;,
		&quot;ME&quot;,
		&quot;MD&quot;,
		&quot;MA&quot;,
		&quot;MI&quot;,
		&quot;MN&quot;,
		&quot;MS&quot;,
		&quot;MO&quot;,
		&quot;MT&quot;,
		&quot;NE&quot;,
		&quot;NV&quot;,
		&quot;NH&quot;,
		&quot;NJ&quot;,
		&quot;NM&quot;,
		&quot;NY&quot;,
		&quot;NC&quot;,
		&quot;ND&quot;,
		&quot;OH&quot;,
		&quot;OK&quot;,
		&quot;OR&quot;,
		&quot;PA&quot;,
		&quot;RI&quot;,
		&quot;SC&quot;,
		&quot;SD&quot;,
		&quot;TN&quot;,
		&quot;TX&quot;,
		&quot;UT&quot;,
		&quot;VT&quot;,
		&quot;VA&quot;,
		&quot;WA&quot;,
		&quot;WV&quot;,
		&quot;WI&quot;,
		&quot;WY&quot;];
	var state = valFromList(vals);
	return state
}
function street(){
	var streets = [&quot;Elm&quot;,
		&quot;Oak&quot;,
		&quot;Maple&quot;,
		&quot;Birch&quot;,
		&quot;Cedar&quot;,
		&quot;Chestnut&quot;,
		&quot;Hawthorn&quot;,
		&quot;Juniper&quot;,
		&quot;Ash&quot;,
		&quot;Walnut&quot;];
	var suffix = [
		&quot;LN&quot;,
		&quot;AVE&quot;,
		&quot;CT&quot;,
		&quot;TER&quot;,
		&quot;WAY&quot;,
		&quot;DR&quot;
	];
	var street = randomInt(4) +&quot; &quot;+ valFromList(streets)+&quot; &quot;+ valFromList(suffix);
	return street;
}
function adjustYear(date,minDiff,maxDiff){
	var newDate = new Date(date.getTime());
	var year = date.getFullYear();
	year = year + Math.floor(Math.random()*(maxDiff-minDiff))+minDiff
	newDate.setFullYear(year);
	newDate.setMonth(Math.floor(Math.random()*12));
	newDate.setDate(Math.floor(Math.random()*28));
	return newDate;
}
function adjustDate(date,minDiff,maxDiff){
	var newDate = new Date(date.getTime());
	var date = date.getDate();
	date = date + Math.floor(Math.random()*(maxDiff-minDiff))+minDiff
	newDate.setDate(date);
	return newDate;
}
function randomDate(lower,upper){
	var date = new Date();
	date.setFullYear(Math.floor(Math.random()*(upper-lower))+lower);
	date.setMonth(Math.floor(Math.random()*12));
	date.setDate(Math.floor(Math.random()*28));
	return date;
}
function formatDate(date){
	var output = date.getFullYear()+pad(date.getMonth()+1,2)+pad((date.getDate()),2);
	return output;
}
function pad(n, width, z) {
	  z = z || &apos;0&apos;;
	  n = n + &apos;&apos;;
	  return n.length &gt;= width ? n : new Array(width - n.length + 1).join(z) + n;
	}
function valFromList(array){
	return array[Math.floor(Math.random() * array.length)];
}
function phoneNumber(){
	return pad(800 + randomInt(2),3)+pad(randomInt(3),3)+pad(randomInt(4),4);
}
function patientLocation(indicator){
	var loc = &quot;XXPOC&quot;+&quot;^&quot;+randomInt(3)+&quot;^&quot;+(randomInt(1) % 4)+&quot;^&quot;+&quot;Datica Hospital &quot;+indicator;
	return loc;
}
function price(digits){
	return randomInt(digits)+&quot;.&quot;+pad(randomInt(2),2);
}</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>DELIMITED</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.4.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.4.1">
          <columnDelimiter>^</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
          <numberedRows>false</numberedRows>
          <ignoreCR>true</ignoreCR>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.4.1">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.4.1">
          <splitType>Record</splitType>
          <batchSkipRecords>0</batchSkipRecords>
          <batchMessageDelimiter></batchMessageDelimiter>
          <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
          <batchGroupingColumn></batchGroupingColumn>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.1">
      <rules/>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.1">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.4.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${sampleResp}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.4.1">
        <steps/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.1">
        <steps/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.1">
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries>
    <codeTemplateLibrary version="3.4.1">
      <id>10e63131-3e24-4419-a268-ed823aba5790</id>
      <name>Datica Mirth OCI Code Template Library</name>
      <revision>1</revision>
      <lastModified>
        <time>1512397292259</time>
        <timezone>America/New_York</timezone>
      </lastModified>
      <description>This library contains code templates used by the Datica Mirth OCI channels</description>
      <includeNewChannels>true</includeNewChannels>
      <enabledChannelIds>
        <string>1192bb86-1f4d-4ca0-9343-e1b87d790154</string>
        <string>44ade9e2-d2ec-40f0-99cd-c2518f1aef0a</string>
        <string>2edfb44b-d53e-43c0-9cee-dfb8c5d28c80</string>
        <string>12832ab3-cdac-485f-bf81-4c525359af88</string>
        <string>6546423b-30d4-46dc-92d7-3e651a542a42</string>
        <string>0d245f0f-1239-46cb-96db-b6c03ee91b18</string>
        <string>515eb748-bcc9-4b46-a086-be3174f3df41</string>
        <string>f6ba16ce-08cf-499f-8dac-143646aadd51</string>
        <string>6a27e181-4776-46d7-b862-5cc4968ec8e7</string>
        <string>647fa65c-d0bb-4f32-a1f6-b218136ebdb8</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>8b69b2e3-4cb0-40f9-93e4-b56c33ba112d</string>
        <string>03fbd8a8-0215-47fb-8077-bdfea025f8be</string>
        <string>3a0d6cc3-aa81-405f-9030-9e6f1aaede1e</string>
        <string>e7c2be6b-fba1-4fa6-8960-0fe4e997b5bd</string>
        <string>7fa5ee0f-5da8-4460-b9b9-9ad791096261</string>
        <string>52e9904e-a3ec-44fa-ae8a-d660a6e10a42</string>
        <string>4c14f245-2cd7-4e51-9401-6a941fa948f5</string>
        <string>7a7a1307-a695-490f-9755-46ada428c159</string>
        <string>4108bf57-50de-4347-8719-64f582334aa0</string>
        <string>638e0505-abd0-405d-8422-8b6e0e84e238</string>
        <string>9ff5bb6e-6c76-4b3a-9e87-033a11dad4f6</string>
        <string>27b614a4-fbd6-41bc-b37f-d9454a0b73eb</string>
        <string>8f7a81c6-ab97-4335-b731-f3d2c715cada</string>
        <string>a605c468-d34f-4966-9c18-db8ce72e023f</string>
        <string>ab4e0274-be44-444a-8530-c08ae238cd93</string>
        <string>9391bf69-d2f7-4085-bff0-723ef11a9df5</string>
        <string>053386c8-3182-4620-bc1b-9d3974d34be8</string>
        <string>4b7b461d-8246-4797-a8f3-06f07d9efee4</string>
        <string>76e2dd55-419b-4f78-8cb4-b8eb687499f5</string>
        <string>866fbd5b-63a2-4211-b13f-dabd5601de7c</string>
        <string>184f26f3-f72c-4208-a66e-6ff4b78d0d98</string>
        <string>689629e8-f3d1-4ded-b2e8-b28264f74da6</string>
        <string>479ca566-d489-4f92-ac92-6bb019eecd27</string>
        <string>dce6c65a-511c-4d06-909e-6e9553281842</string>
        <string>651d65e5-1460-44d9-8b9d-ee983797f36e</string>
        <string>424319ec-4d06-44ae-b395-b0e0e3c161e5</string>
        <string>b9e4ec1b-3666-4a7c-a6e5-d44bf4acb58b</string>
        <string>423968eb-01ad-465f-891a-250444e65d13</string>
        <string>fc6b053f-f078-477d-b317-e55aa12e8d1a</string>
        <string>3076fe92-da8c-46f1-b162-4498433c82c3</string>
        <string>0a73e2f2-ef41-4e08-afde-3f0a445106eb</string>
        <string>06f51744-9fe3-4c9c-a100-0497fc79a5b1</string>
        <string>14fd925a-eaab-457c-9d8b-18803350fb1a</string>
        <string>ae2cac45-d0d6-404f-9530-3fc44e2369cc</string>
        <string>6a029d79-d96f-4437-b9ef-10b2f345dd5d</string>
        <string>4da26cfa-8b26-4353-9928-f33f024bc8a6</string>
        <string>217689ee-ddf7-4085-9261-3e030e95293a</string>
        <string>a20be57d-4b14-4932-88fd-b3264b444fdf</string>
        <string>3dde045a-c514-4cd7-b6d5-5576155177d5</string>
        <string>a99f3b5a-07f0-400d-ae09-c195cf2a59c5</string>
        <string>70d1e94a-bc04-413e-8510-f534075deb79</string>
        <string>f2231b87-3c49-498a-962d-03503bc04147</string>
        <string>6d5edbe0-3c33-4a60-b78b-08e32afdb880</string>
        <string>af777014-3696-4fad-8f98-293e7d65a90c</string>
        <string>17f3958e-1207-47ba-aab9-5aab3ef15476</string>
        <string>8729b803-b38a-46f6-be11-5169facc2632</string>
        <string>015db3f7-825c-484e-86b2-33b9e79b727c</string>
        <string>2a032710-3d63-450a-b0bf-c0099bb29aab</string>
        <string>4bf5438f-232a-487a-9581-c796f605654d</string>
        <string>60254522-dc8c-43d6-bb41-ac66897c0d43</string>
        <string>1f7adc36-6fa0-47f3-9228-d55c8a988ac0</string>
        <string>5c88d795-4958-4147-b151-b84111a83d89</string>
        <string>d94f8c71-b05b-4446-813d-be17058a6480</string>
        <string>a48610e7-1f18-467b-bb69-b3ac5c2b8c04</string>
        <string>29361ad8-00dc-45c7-ab61-7b2e07023969</string>
        <string>f893da87-8e5f-48b8-9280-c384ff3bcc99</string>
        <string>83eb8d17-1892-4bfd-b19b-e28e0ca03b69</string>
        <string>1d2d8815-0962-4986-b731-b1f49a733db8</string>
        <string>ab1f0813-77a3-4b4e-90be-a472e999a047</string>
        <string>07b13575-8803-4340-92e8-40bc9f160fc8</string>
        <string>6f4013b1-cbc4-412b-9984-2204fe7746da</string>
        <string>660f2bb8-3471-47a4-9299-98a985017333</string>
        <string>30573bec-3215-4dc8-becb-091ab5485be0</string>
        <string>46214349-f697-4c7b-8d26-44fd409efc53</string>
        <string>f6b6cbe4-cdca-42f0-ac74-dfa7e49a27c6</string>
        <string>abf6afe4-de93-44e8-b59c-1c967d045b38</string>
        <string>9966294e-7c31-4f52-9d2f-2fd705e583a9</string>
        <string>f1246189-09ae-4ecb-b73e-35d9d4a21876</string>
        <string>e00c4162-2e90-440a-8e99-1543a0d8472d</string>
        <string>0fa23c6d-b057-44bc-a4b3-f4019fea0c5e</string>
        <string>9901adbe-50a3-431f-8b18-b93375093c6f</string>
        <string>c43b6a54-5476-4eb7-82c7-b741009c4031</string>
        <string>3c90fc7c-1aa1-4381-83a1-116e3e6bdd61</string>
        <string>f590b560-ca56-45de-8716-1432f7b6efc5</string>
        <string>a7091b52-5045-47d3-84ae-e5a6579e2943</string>
        <string>aa0e5130-6ffd-4960-a1f4-a9cefd1af050</string>
        <string>3511e706-3d3c-4174-a65f-0905688e9f22</string>
        <string>9977e3d2-2184-4e4f-8815-f9b42830dd51</string>
        <string>3fc61612-3fc3-4a64-b42f-2975a71f66b7</string>
        <string>f47f2edc-2a29-4fc4-9de6-a9efa9fcbb38</string>
        <string>f1b9e55e-698d-4d5a-a6fd-d8bc75f7251f</string>
        <string>b1e2fe6b-4991-40ff-a9f4-4ce5abed0109</string>
        <string>6c07f763-a93a-47ae-a1d8-2580fc0f5ccc</string>
        <string>c8f5ba67-7d41-4abf-b4f5-dd122b441f36</string>
        <string>2dcc02c1-0e50-44e2-aa63-46b5bbb6d31c</string>
        <string>698bc4ea-c9c7-4af3-9cbc-0ae9f27665bd</string>
        <string>20ebe877-0a55-4589-8daa-bbc66f8c1746</string>
        <string>104680bd-a293-4edc-a33a-ecfeec069da5</string>
        <string>99beb09b-6d76-4fc1-aa07-8e53472b7036</string>
        <string>782cfee5-4ca6-49c3-ae7f-dd76a5e4df48</string>
        <string>d0b3a0e3-01ff-4ce5-a4a7-748c7413e51f</string>
        <string>20b589b6-4167-4f8d-b8ab-242f62a28452</string>
        <string>993fe87c-697f-4259-b59f-ebd7e3913ac8</string>
        <string>640344b6-2d0e-4858-bd43-ef58d9329f75</string>
        <string>93aa0bb7-a3e4-488d-98ec-d14ba49d1c9c</string>
        <string>d51e8dea-3e2a-49d4-9475-21db46ed1559</string>
        <string>c67da354-57e3-401f-b684-2190b92335ac</string>
        <string>4ad918f5-1323-44a9-b3ec-fce83e062b9d</string>
        <string>b4c20126-17c5-4c11-a76e-7fa2aaf94cbe</string>
        <string>220aeb9b-3050-43ff-bd41-7e38cec5010e</string>
        <string>e8667ddb-063e-48cf-a163-f2d50944296b</string>
        <string>2de6bc63-2d0c-4891-8662-05331cdbc135</string>
        <string>e340c788-a921-4bab-92d9-ff8e0a640575</string>
        <string>7223dcc0-41c9-4cba-872f-3cb8ca724ea3</string>
        <string>a74ae7d3-b6c3-49b5-840f-0aafbac3fa6b</string>
        <string>b92f73d2-fb74-4a63-bec5-c8464bc22653</string>
        <string>b340b685-f8f8-4df2-a03e-82efe8d9afcf</string>
        <string>a8454dfe-aa8e-469f-a5bc-fe30fd3d3033</string>
        <string>ef90d21a-b975-45f9-8426-83de2de99188</string>
        <string>fd282052-cae0-4b01-9f4a-2a68f8d4fd8a</string>
        <string>cadedffd-7184-4c62-9ed9-5cf36ccb32b8</string>
        <string>98d6cd83-c049-44d8-ad48-1c44d95ce6f2</string>
        <string>fc7fa005-2346-4dc2-9fb2-faaa090c556f</string>
        <string>1045246c-704d-445d-8733-86aa16205994</string>
        <string>0d6774d6-8663-4513-8a78-fea5ebe69bbc</string>
        <string>b56f9561-3659-4e4d-a03c-723b2daf9f49</string>
        <string>6548b06b-0e02-4375-8749-b61e5a016ed2</string>
        <string>76656822-9750-4ba0-8b42-8efc01f75230</string>
        <string>1cb576e1-6c80-457b-a7d7-9406113157a3</string>
        <string>86e5d119-ef36-4eb6-852e-701228076b51</string>
        <string>748de96b-9101-47d0-88aa-c18344c194ca</string>
        <string>6704e9fc-7f6f-4e67-bfd4-527ba1a8b186</string>
        <string>749d6b73-ced6-4638-a7ad-4049c811a35c</string>
        <string>412610bb-4ac3-4229-8929-f7969018a9dd</string>
        <string>04ef8a88-576f-42ab-a637-5383776a0b60</string>
        <string>8cfa82cc-ee8a-428a-9fff-e32b2439b9c8</string>
        <string>6d6a6667-6c83-476a-a0f6-dd8d524dd887</string>
        <string>fbd5a175-ad41-44f6-95d3-bd898a3f3fb8</string>
        <string>a6bb0a27-6db8-4218-9478-a1600bae3a7b</string>
        <string>2d2c762c-2f17-482e-af65-1b979c758250</string>
        <string>1a7d6d5f-97a9-4e77-80eb-cfb94fa445c6</string>
        <string>4dcf348b-f385-4889-8e10-580092be907f</string>
        <string>ab7f86cd-94ff-4237-bef9-3e45057821ba</string>
        <string>fd891108-6b82-4ca9-a0ac-0d163926ae0a</string>
        <string>bc5b7a3d-b86d-48d1-81fd-a5f92303defb</string>
        <string>4c9b4da2-faf1-45b3-9cdf-bec2f81bf308</string>
        <string>55de7d91-8e2e-473b-9ca1-09aa47254a75</string>
        <string>add3dd62-61ff-4c63-a4a5-59b97c22c830</string>
        <string>ce9ebf65-8647-46bb-83aa-f1acb687c877</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="3.4.1">
          <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
          <name>Convert HL7 Date Format to ISO</name>
          <revision>1</revision>
          <lastModified>
            <time>1512397292449</time>
            <timezone>America/New_York</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: Datica Inc.
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.1">
          <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
          <name>Convert ISO Date Format to HL7</name>
          <revision>1</revision>
          <lastModified>
            <time>1512397292549</time>
            <timezone>America/New_York</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts ISO date format to HL7 v2 format
*/

/*
	Author: Datica Inc.
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone ) 
{
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
		}
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);	
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.1">
          <id>4cb42e06-7c9a-4fd2-bcb5-b9f4053a9c19</id>
          <name>Get Segments After a Particular Segment</name>
          <revision>1</revision>
          <lastModified>
            <time>1512397292339</time>
            <timezone>America/New_York</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Returns an array of segments with the specified name that come after a given segment in the message.
*/
/*
	Author: Nick Rupley
	Date Modified: 2/13/2013
	getSegmentsAfter: Returns an array of segments with the specified name that come after a given segment in the message.

	Arguments
	---------
		Required
		--------
			root:			The root HL7Message node of the message, or the parent of the segment node.
			startSeg:		The segment AFTER which to start collecting segments.
			segName:		The name (String or RegExp) of the segments you want to collect.

		Optional
		--------
			consecutiveInd:	If true, indicates that the segments are expected to come directly after startSeg. 
							If false, segments are collected until another segment with the same name as startSeg is encountered.
							Defaults to false.
			stopSegNames:	An array of segment names that, when encountered, stop the collection of segments.
*/

function getSegmentsAfter(root, startSeg, segName, consecutiveInd, stopSegNames) {
	function test(str) {
		return segName instanceof RegExp ? segName.test(str) : segName === str;
	}

	// The index to start collection is the next one up from the starting segment
	var index = startSeg.childIndex()+1;
	// The return array
	var out = [];
	// Boolean placeholder to stop iteration
	var done = false;
	// Object that will contain all of the stopSegNames strings, bound to a truthy value (1)
	var stopNames = {};
	// Indicates whether we have any stop segments
	var stopNamesInd = false;
	// If stopSegNames is defined
	if (stopSegNames !== undefined &amp;&amp; stopSegNames !== null) {
		// Set our indicator to true
		stopNamesInd = true;
		// Add each string in the array to our object
		for each (name in stopSegNames)
			stopNames[name] = 1;
	}

	// Iterate through each child in the root, starting at the segment after startSeg, and
	// ending at the final segment, or when the done flag is set to true.
	while (index &lt; root.children().length() &amp;&amp; !done) {
		// If a stop segment is encountered, stop iteration
		if (stopNamesInd &amp;&amp; root.children()[index].name().toString() in stopNames)
			done = true;
		// If a segment with the same name as startSeg is encountered, stop iteration
		else if (root.children()[index].name().toString() == startSeg.name().toString() &amp;&amp; !consecutiveInd)
			done = true;
		// If we&apos;re only collecting consecutive segments and we encounter a segment with a name other than segName, stop iteration
		else if (!test(root.children()[index].name().toString()) &amp;&amp; consecutiveInd)
			done = true;
		// If all previous tests passed, and the current segment has a name of segName, then add it to our array
		else if (test(root.children()[index].name().toString()))
			out.push(root.children()[index]);
		// Increment our index counter
		index++;
	}

	// Return the output array
	return out;
}</code>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
  </codeTemplateLibraries>
</channel>